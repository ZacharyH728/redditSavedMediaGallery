{"ast":null,"code":"import axios from 'axios';\n\n// Reddit API credentials\nconst CLIENT_ID = 'dBRtI56wSSKD9QZpWXEtbQ';\nconst REDIRECT_URI = 'http://localhost:3000/auth-callback';\nconst RANDOM_STRING = 'random_string'; // Should be generated per session\nconst SCOPES = ['history', 'identity'];\nexport const getAuthUrl = () => {\n  return `https://www.reddit.com/api/v1/authorize?client_id=${CLIENT_ID}&response_type=code&state=${RANDOM_STRING}&redirect_uri=${REDIRECT_URI}&duration=temporary&scope=${SCOPES.join(' ')}`;\n};\nexport const getAccessToken = async code => {\n  try {\n    const response = await axios.post('https://www.reddit.com/api/v1/access_token', `grant_type=authorization_code&code=${code}&redirect_uri=${REDIRECT_URI}`, {\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      },\n      auth: {\n        username: CLIENT_ID,\n        password: '' // Client secret is not needed for installed apps\n      }\n    });\n    return response.data.access_token;\n  } catch (error) {\n    console.error('Error getting access token:', error);\n    throw error;\n  }\n};\n\n// Get user information\nexport const getUserInfo = async token => {\n  try {\n    const response = await axios.get('https://oauth.reddit.com/api/v1/me', {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'User-Agent': 'web:reddit-saved-gallery:v1.0'\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching user info:', error);\n    throw error;\n  }\n};\n\n// Get saved posts\nexport const getSavedPosts = async (token, username, limit = LIMIT) => {\n  try {\n    const response = await axios.get(`https://oauth.reddit.com/user/${username}/saved`, {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'User-Agent': 'web:reddit-saved-gallery:v1.0'\n      },\n      params: {\n        limit: limit\n      }\n    });\n\n    // Extract posts from response and filter for media content\n    const savedItems = response.data.data.children.map(child => child.data);\n\n    // Filter for posts with media\n    return savedItems.filter(post => {\n      // Check if it's a submission (not a comment)\n      if (!post.title) return false;\n\n      // Check for various media types\n      return post.is_video || post.post_hint === 'image' || post.url.match(/\\.(jpg|jpeg|png|gif)$/) || post.url.includes('imgur.com') || post.url.includes('gfycat.com') || post.url.includes('redgifs.com') || post.url.includes('i.redd.it');\n    });\n  } catch (error) {\n    console.error('Error fetching saved posts:', error);\n    throw error;\n  }\n};\nexport const getMediaUrl = post => {\n  // Handle direct image links\n  if (post.url.match(/\\.(jpg|jpeg|png|gif)$/i)) {\n    return post.url;\n  }\n\n  // Handle Reddit videos\n  if (post.is_video && post.media && post.media.reddit_video) {\n    return post.media.reddit_video.fallback_url;\n  }\n\n  // Handle imgur links without extension\n  if (post.url.includes('imgur.com') && !post.url.match(/\\.(jpg|jpeg|png|gif)$/i)) {\n    return `${post.url}.jpg`;\n  }\n\n  // Handle gfycat links\n  if (post.url.includes('gfycat.com')) {\n    const gfycatId = post.url.split('/').pop();\n    return `https://thumbs.gfycat.com/${gfycatId}-size_restricted.gif`;\n  }\n\n  // Default case\n  return post.thumbnail !== 'default' ? post.thumbnail : null;\n};","map":{"version":3,"names":["axios","CLIENT_ID","REDIRECT_URI","RANDOM_STRING","SCOPES","getAuthUrl","join","getAccessToken","code","response","post","headers","auth","username","password","data","access_token","error","console","getUserInfo","token","get","getSavedPosts","limit","LIMIT","params","savedItems","children","map","child","filter","title","is_video","post_hint","url","match","includes","getMediaUrl","media","reddit_video","fallback_url","gfycatId","split","pop","thumbnail"],"sources":["/Users/zachary/Desktop/reddit-saved-gallery/src/services/redditApi.js"],"sourcesContent":["import axios from 'axios';\n\n// Reddit API credentials\nconst CLIENT_ID = 'dBRtI56wSSKD9QZpWXEtbQ';\nconst REDIRECT_URI = 'http://localhost:3000/auth-callback';\nconst RANDOM_STRING = 'random_string'; // Should be generated per session\nconst SCOPES = ['history', 'identity'];\n\nexport const getAuthUrl = () => {\n  return `https://www.reddit.com/api/v1/authorize?client_id=${CLIENT_ID}&response_type=code&state=${RANDOM_STRING}&redirect_uri=${REDIRECT_URI}&duration=temporary&scope=${SCOPES.join(' ')}`;\n};\n\nexport const getAccessToken = async (code) => {\n  try {\n    const response = await axios.post(\n      'https://www.reddit.com/api/v1/access_token',\n      `grant_type=authorization_code&code=${code}&redirect_uri=${REDIRECT_URI}`,\n      {\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n        },\n        auth: {\n          username: CLIENT_ID,\n          password: '', // Client secret is not needed for installed apps\n        },\n      }\n    );\n    return response.data.access_token;\n  } catch (error) {\n    console.error('Error getting access token:', error);\n    throw error;\n  }\n};\n\n// Get user information\nexport const getUserInfo = async (token) => {\n  try {\n    const response = await axios.get('https://oauth.reddit.com/api/v1/me', {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'User-Agent': 'web:reddit-saved-gallery:v1.0'\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching user info:', error);\n    throw error;\n  }\n};\n\n// Get saved posts\nexport const getSavedPosts = async (token, username, limit = LIMIT) => {\n  try {\n    const response = await axios.get(`https://oauth.reddit.com/user/${username}/saved`, {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'User-Agent': 'web:reddit-saved-gallery:v1.0'\n      },\n      params: {\n        limit: limit\n      }\n    });\n    \n    // Extract posts from response and filter for media content\n    const savedItems = response.data.data.children.map(child => child.data);\n    \n    // Filter for posts with media\n    return savedItems.filter(post => {\n      // Check if it's a submission (not a comment)\n      if (!post.title) return false;\n      \n      // Check for various media types\n      return (\n        post.is_video ||\n        post.post_hint === 'image' ||\n        post.url.match(/\\.(jpg|jpeg|png|gif)$/) ||\n        post.url.includes('imgur.com') ||\n        post.url.includes('gfycat.com') ||\n        post.url.includes('redgifs.com') ||\n        post.url.includes('i.redd.it')\n      );\n    });\n  } catch (error) {\n    console.error('Error fetching saved posts:', error);\n    throw error;\n  }\n};\n\nexport const getMediaUrl = (post) => {\n  // Handle direct image links\n  if (post.url.match(/\\.(jpg|jpeg|png|gif)$/i)) {\n    return post.url;\n  }\n  \n  // Handle Reddit videos\n  if (post.is_video && post.media && post.media.reddit_video) {\n    return post.media.reddit_video.fallback_url;\n  }\n  \n  // Handle imgur links without extension\n  if (post.url.includes('imgur.com') && !post.url.match(/\\.(jpg|jpeg|png|gif)$/i)) {\n    return `${post.url}.jpg`;\n  }\n  \n  // Handle gfycat links\n  if (post.url.includes('gfycat.com')) {\n    const gfycatId = post.url.split('/').pop();\n    return `https://thumbs.gfycat.com/${gfycatId}-size_restricted.gif`;\n  }\n  \n  // Default case\n  return post.thumbnail !== 'default' ? post.thumbnail : null;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}