{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _RedditContent = _interopRequireDefault(require(\"./RedditContent.js\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\n/**\n* @summary A class representing a multireddit.\n* <style> #MultiReddit {display: none} </style>\n* @example\n*\n* // Get a multireddit belonging to a specific user\n* r.getUser('multi-mod').getMultireddit('coding_languages')\n*/\nvar MultiReddit = class MultiReddit extends _RedditContent.default {\n  constructor(options, _r, _hasFetched) {\n    var _this;\n    super(options, _r, _hasFetched);\n    _this = this;\n    if (_hasFetched) {\n      this.curator = _r.getUser(this.path.split('/')[2]);\n      this.subreddits = this.subreddits.map(function (item) {\n        return _this._r._newObject('Subreddit', item.data || {\n          display_name: item.name\n        });\n      });\n    }\n  }\n  get _uri() {\n    return \"api/multi\".concat(this._path, \"?expand_srs=true\");\n  }\n  get _path() {\n    return \"/user/\".concat(this.curator.name, \"/m/\").concat(this.name);\n  }\n  /**\n  * @summary Copies this multireddit to the requester's own account.\n  * @param {object} options\n  * @param {string} options.newName The new name for the copied multireddit\n  * @returns {Promise} A Promise for the newly-copied multireddit\n  * @example r.getUser('multi-mod').getMultireddit('coding_languages').copy({newName: 'my_coding_languages_copy'})\n  */\n\n  copy(_ref) {\n    var _this2 = this;\n    var new_name = _ref.new_name,\n      _ref$newName = _ref.newName,\n      newName = _ref$newName === void 0 ? new_name : _ref$newName;\n    return this._r._getMyName().then(function (name) {\n      return _this2._post({\n        uri: 'api/multi/copy',\n        form: {\n          from: _this2._path,\n          to: \"/user/\".concat(name, \"/m/\").concat(newName),\n          display_name: newName\n        }\n      });\n    });\n  }\n  /**\n  * @summary Renames this multireddit.\n  * @desc **Note**: This method mutates this MultiReddit.\n  * @param {object} options\n  * @param {string} options.newName The new name for this multireddit.\n  * @returns {Promise} A Promise that fulfills with this multireddit\n  * @example r.getUser('multi-mod').getMultireddit('coding_languages').copy({newName: 'cookie_languages '})\n  * @deprecated Reddit no longer provides the corresponding API endpoint. Please use `edit()` with a new name.\n  */\n\n  rename(_ref2) {\n    var _this3 = this;\n    var new_name = _ref2.new_name,\n      _ref2$newName = _ref2.newName,\n      newName = _ref2$newName === void 0 ? new_name : _ref2$newName;\n    return this._r._getMyName().then(function (name) {\n      return _this3._post({\n        uri: 'api/multi/rename',\n        form: {\n          from: _this3._path,\n          to: \"/user/\".concat(name, \"/m/\").concat(newName),\n          display_name: newName\n        }\n      });\n    }).then(function (res) {\n      _this3.name = res.name;\n    }).return(this);\n  }\n  /**\n  * @summary Edits the properties of this multireddit.\n  * @desc **Note**: Any omitted properties here will simply retain their previous values.\n  * @param {object} options\n  * @param {string} [options.name] The name of the new multireddit. 50 characters max.\n  * @param {string} [options.description] A description for the new multireddit, in markdown.\n  * @param {string} [options.visibility] The multireddit's visibility setting. One of `private`, `public`, `hidden`.\n  * @param {string} [options.icon_name] One of `art and design`, `ask`, `books`, `business`, `cars`, `comics`, `cute animals`,\n  `diy`, `entertainment`, `food and drink`, `funny`, `games`, `grooming`, `health`, `life advice`, `military`, `models pinup`,\n  `music`, `news`, `philosophy`, `pictures and gifs`, `science`, `shopping`, `sports`, `style`, `tech`, `travel`,\n  `unusual stories`, `video`, `None`\n  * @param {string} [options.key_color] A six-digit RGB hex color, preceded by '#'\n  * @param {string} [options.weighting_scheme] One of 'classic', 'fresh'\n  * @returns {Promise} The updated version of this multireddit\n  * @example r.getUser('not_an_aardvark').getMultireddit('cookie_languages').edit({visibility: 'hidden'})\n  */\n\n  edit(_ref3) {\n    var _ref3$name = _ref3.name,\n      name = _ref3$name === void 0 ? '' : _ref3$name,\n      description = _ref3.description,\n      icon_name = _ref3.icon_name,\n      key_color = _ref3.key_color,\n      visibility = _ref3.visibility,\n      weighting_scheme = _ref3.weighting_scheme;\n    var display_name = name.length ? name : this.name;\n    return this._put({\n      uri: \"api/multi\".concat(this._path),\n      form: {\n        model: JSON.stringify({\n          description_md: description,\n          display_name,\n          icon_name,\n          key_color,\n          visibility,\n          weighting_scheme\n        })\n      }\n    });\n  }\n  /**\n  * @summary Adds a subreddit to this multireddit.\n  * @param {Subreddit} sub The Subreddit object to add (or a string representing a subreddit name)\n  * @returns {Promise} A Promise that fulfills with this multireddit when the reuqest is complete\n  * @example r.getUser('not_an_aardvark').getMultireddit('cookie_languages').addSubreddit('cookies')\n  */\n\n  addSubreddit(sub) {\n    sub = typeof sub === 'string' ? sub : sub.display_name;\n    return this._put({\n      uri: \"api/multi\".concat(this._path, \"/r/\").concat(sub),\n      form: {\n        model: JSON.stringify({\n          name: sub\n        })\n      }\n    }).return(this);\n  }\n  /**\n  * @summary Removes a subreddit from this multireddit.\n  * @param {Subreddit} sub The Subreddit object to remove (or a string representing a subreddit name)\n  * @returns {Promise} A Promise that fulfills with this multireddit when the request is complete\n  * @example r.getUser('not_an_aardvark').getMultireddit('cookie_languages').removeSubreddit('cookies')\n  */\n\n  removeSubreddit(sub) {\n    return this._delete({\n      uri: \"api/multi\".concat(this._path, \"/r/\").concat(typeof sub === 'string' ? sub : sub.display_name)\n    }).return(this);\n  }\n  /* Note: The endpoints GET/PUT /api/multi/multipath/description and GET /api/multi/multipath/r/srname are intentionally not\n  included, because they're redundant and the same thing can be achieved by simply using fetch() and edit(). */\n}; // MultiReddit#delete is not in the class body since Safari 9 can't parse the `delete` function name in class bodies.\n\n/**\n* @function\n* @name delete\n* @summary Deletes this multireddit.\n* @returns {Promise} A Promise that fulfills when this request is complete\n* @example r.getUser('not_an_aardvark').getMultireddit('cookie_languages').delete()\n* @memberof MultiReddit\n* @instance\n*/\n\nObject.defineProperty(MultiReddit.prototype, 'delete', {\n  value() {\n    return this._delete({\n      uri: \"api/multi\".concat(this._path)\n    });\n  },\n  configurable: true,\n  writable: true\n});\nvar _default = MultiReddit;\nexports.default = _default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","_RedditContent","_interopRequireDefault","require","obj","__esModule","MultiReddit","constructor","options","_r","_hasFetched","_this","curator","getUser","path","split","subreddits","map","item","_newObject","data","display_name","name","_uri","concat","_path","copy","_ref","_this2","new_name","_ref$newName","newName","_getMyName","then","_post","uri","form","from","to","rename","_ref2","_this3","_ref2$newName","res","return","edit","_ref3","_ref3$name","description","icon_name","key_color","visibility","weighting_scheme","length","_put","model","JSON","stringify","description_md","addSubreddit","sub","removeSubreddit","_delete","prototype","configurable","writable","_default"],"sources":["/Users/zachary/Desktop/reddit-saved-gallery/node_modules/snoowrap/dist/objects/MultiReddit.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _RedditContent = _interopRequireDefault(require(\"./RedditContent.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n* @summary A class representing a multireddit.\n* <style> #MultiReddit {display: none} </style>\n* @example\n*\n* // Get a multireddit belonging to a specific user\n* r.getUser('multi-mod').getMultireddit('coding_languages')\n*/\nvar MultiReddit = class MultiReddit extends _RedditContent.default {\n  constructor(options, _r, _hasFetched) {\n    var _this;\n\n    super(options, _r, _hasFetched);\n    _this = this;\n\n    if (_hasFetched) {\n      this.curator = _r.getUser(this.path.split('/')[2]);\n      this.subreddits = this.subreddits.map(function (item) {\n        return _this._r._newObject('Subreddit', item.data || {\n          display_name: item.name\n        });\n      });\n    }\n  }\n\n  get _uri() {\n    return \"api/multi\".concat(this._path, \"?expand_srs=true\");\n  }\n\n  get _path() {\n    return \"/user/\".concat(this.curator.name, \"/m/\").concat(this.name);\n  }\n  /**\n  * @summary Copies this multireddit to the requester's own account.\n  * @param {object} options\n  * @param {string} options.newName The new name for the copied multireddit\n  * @returns {Promise} A Promise for the newly-copied multireddit\n  * @example r.getUser('multi-mod').getMultireddit('coding_languages').copy({newName: 'my_coding_languages_copy'})\n  */\n\n\n  copy(_ref) {\n    var _this2 = this;\n\n    var new_name = _ref.new_name,\n        _ref$newName = _ref.newName,\n        newName = _ref$newName === void 0 ? new_name : _ref$newName;\n    return this._r._getMyName().then(function (name) {\n      return _this2._post({\n        uri: 'api/multi/copy',\n        form: {\n          from: _this2._path,\n          to: \"/user/\".concat(name, \"/m/\").concat(newName),\n          display_name: newName\n        }\n      });\n    });\n  }\n  /**\n  * @summary Renames this multireddit.\n  * @desc **Note**: This method mutates this MultiReddit.\n  * @param {object} options\n  * @param {string} options.newName The new name for this multireddit.\n  * @returns {Promise} A Promise that fulfills with this multireddit\n  * @example r.getUser('multi-mod').getMultireddit('coding_languages').copy({newName: 'cookie_languages '})\n  * @deprecated Reddit no longer provides the corresponding API endpoint. Please use `edit()` with a new name.\n  */\n\n\n  rename(_ref2) {\n    var _this3 = this;\n\n    var new_name = _ref2.new_name,\n        _ref2$newName = _ref2.newName,\n        newName = _ref2$newName === void 0 ? new_name : _ref2$newName;\n    return this._r._getMyName().then(function (name) {\n      return _this3._post({\n        uri: 'api/multi/rename',\n        form: {\n          from: _this3._path,\n          to: \"/user/\".concat(name, \"/m/\").concat(newName),\n          display_name: newName\n        }\n      });\n    }).then(function (res) {\n      _this3.name = res.name;\n    }).return(this);\n  }\n  /**\n  * @summary Edits the properties of this multireddit.\n  * @desc **Note**: Any omitted properties here will simply retain their previous values.\n  * @param {object} options\n  * @param {string} [options.name] The name of the new multireddit. 50 characters max.\n  * @param {string} [options.description] A description for the new multireddit, in markdown.\n  * @param {string} [options.visibility] The multireddit's visibility setting. One of `private`, `public`, `hidden`.\n  * @param {string} [options.icon_name] One of `art and design`, `ask`, `books`, `business`, `cars`, `comics`, `cute animals`,\n  `diy`, `entertainment`, `food and drink`, `funny`, `games`, `grooming`, `health`, `life advice`, `military`, `models pinup`,\n  `music`, `news`, `philosophy`, `pictures and gifs`, `science`, `shopping`, `sports`, `style`, `tech`, `travel`,\n  `unusual stories`, `video`, `None`\n  * @param {string} [options.key_color] A six-digit RGB hex color, preceded by '#'\n  * @param {string} [options.weighting_scheme] One of 'classic', 'fresh'\n  * @returns {Promise} The updated version of this multireddit\n  * @example r.getUser('not_an_aardvark').getMultireddit('cookie_languages').edit({visibility: 'hidden'})\n  */\n\n\n  edit(_ref3) {\n    var _ref3$name = _ref3.name,\n        name = _ref3$name === void 0 ? '' : _ref3$name,\n        description = _ref3.description,\n        icon_name = _ref3.icon_name,\n        key_color = _ref3.key_color,\n        visibility = _ref3.visibility,\n        weighting_scheme = _ref3.weighting_scheme;\n    var display_name = name.length ? name : this.name;\n    return this._put({\n      uri: \"api/multi\".concat(this._path),\n      form: {\n        model: JSON.stringify({\n          description_md: description,\n          display_name,\n          icon_name,\n          key_color,\n          visibility,\n          weighting_scheme\n        })\n      }\n    });\n  }\n  /**\n  * @summary Adds a subreddit to this multireddit.\n  * @param {Subreddit} sub The Subreddit object to add (or a string representing a subreddit name)\n  * @returns {Promise} A Promise that fulfills with this multireddit when the reuqest is complete\n  * @example r.getUser('not_an_aardvark').getMultireddit('cookie_languages').addSubreddit('cookies')\n  */\n\n\n  addSubreddit(sub) {\n    sub = typeof sub === 'string' ? sub : sub.display_name;\n    return this._put({\n      uri: \"api/multi\".concat(this._path, \"/r/\").concat(sub),\n      form: {\n        model: JSON.stringify({\n          name: sub\n        })\n      }\n    }).return(this);\n  }\n  /**\n  * @summary Removes a subreddit from this multireddit.\n  * @param {Subreddit} sub The Subreddit object to remove (or a string representing a subreddit name)\n  * @returns {Promise} A Promise that fulfills with this multireddit when the request is complete\n  * @example r.getUser('not_an_aardvark').getMultireddit('cookie_languages').removeSubreddit('cookies')\n  */\n\n\n  removeSubreddit(sub) {\n    return this._delete({\n      uri: \"api/multi\".concat(this._path, \"/r/\").concat(typeof sub === 'string' ? sub : sub.display_name)\n    }).return(this);\n  }\n  /* Note: The endpoints GET/PUT /api/multi/multipath/description and GET /api/multi/multipath/r/srname are intentionally not\n  included, because they're redundant and the same thing can be achieved by simply using fetch() and edit(). */\n\n\n}; // MultiReddit#delete is not in the class body since Safari 9 can't parse the `delete` function name in class bodies.\n\n/**\n* @function\n* @name delete\n* @summary Deletes this multireddit.\n* @returns {Promise} A Promise that fulfills when this request is complete\n* @example r.getUser('not_an_aardvark').getMultireddit('cookie_languages').delete()\n* @memberof MultiReddit\n* @instance\n*/\n\nObject.defineProperty(MultiReddit.prototype, 'delete', {\n  value() {\n    return this._delete({\n      uri: \"api/multi\".concat(this._path)\n    });\n  },\n\n  configurable: true,\n  writable: true\n});\nvar _default = MultiReddit;\nexports.default = _default;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}