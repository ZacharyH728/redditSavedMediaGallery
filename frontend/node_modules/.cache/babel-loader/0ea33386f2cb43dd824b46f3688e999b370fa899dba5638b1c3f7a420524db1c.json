{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _constants = require(\"../constants.js\");\nvar _errors = require(\"../errors.js\");\nvar _RedditContent = _interopRequireDefault(require(\"./RedditContent.js\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\n/**\n* A class representing a reddit user\n* <style> #RedditUser {display: none} </style>\n* @extends ReplyableContent\n* @example\n*\n* // Get a user with the given username\n* r.getUser('spez')\n*/\nvar RedditUser = class RedditUser extends _RedditContent.default {\n  get _uri() {\n    if (typeof this.name !== 'string' || !_constants.USERNAME_REGEX.test(this.name)) {\n      throw new _errors.InvalidUserError(this.name);\n    }\n    return \"user/\".concat(this.name, \"/about\");\n  }\n  /**\n  * @summary Gives reddit gold to a user\n  * @param {number} months The number of months of gold to give. This must be a number between 1 and 36.\n  * @returns {Promise} A Promise that fulfills when the request is complete\n  * @example r.getUser('not_an_aardvark').giveGold(12)\n  */\n\n  giveGold(months) {\n    /* Ideally this would allow for more than 36 months by sending multiple requests, but I don't have the resources to test\n    that code, and it's probably better that such a big investment be deliberate anyway. */\n    if (typeof months !== 'number' || months < 1 || months > 36) {\n      throw new _errors.InvalidMethodCallError('Invalid argument to RedditUser#giveGold; `months` must be between 1 and 36.');\n    }\n    return this._post({\n      uri: \"api/v1/gold/give/\".concat(this.name),\n      form: {\n        months\n      }\n    });\n  }\n  /**\n  * Assigns flair to this user on a given subreddit (as a moderator).\n  * @param {object} options\n  * @param {string} options.subredditName The subreddit that flair should be assigned on\n  * @param {string} [options.text=''] The text that the user's flair should have\n  * @param {string} [options.cssClass=''] The CSS class that the user's flair should have\n  * @returns {Promise} A Promise that fulfills with the current user after the request is complete\n  * @example r.getUser('not_an_aardvark').assignFlair({subredditName: 'snoowrap', text: \"Isn't an aardvark\"})\n  */\n\n  assignFlair(options) {\n    return this._r._assignFlair(_objectSpread({}, options, {\n      name: this.name\n    })).return(this);\n  }\n  /**\n  * @summary Adds this user as a friend, or modifies their friend note.\n  * @desc **Note:** reddit.com only permits \"notes\" to be added on friends if the authenticated account has a subscription to\n  reddit gold.\n  * @param {object} options\n  * @param {string} [options.note] An optional note to add on the user (300 characters max)\n  * @returns {Promise} A Promise that fulfills when this request is complete\n  * @example r.getUser('actually_an_aardvark').friend({note: 'Is an aardvark'})\n  */\n\n  friend() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      note = _ref.note;\n    return this._put({\n      uri: \"api/v1/me/friends/\".concat(this.name),\n      body: {\n        user: this.name,\n        note\n      }\n    }).return(this);\n  }\n  /**\n  * @summary Removes this user from the requester's friend list.\n  * @returns {Promise} A Promise that fulfills with this user when the request is complete\n  * @example r.getUser('actually_an_aardvark').unfriend()\n  */\n\n  unfriend() {\n    return this._delete({\n      uri: \"api/v1/me/friends/\".concat(this.name)\n    });\n  }\n  /**\n  * @summary Gets information on this user related to their presence on the friend list.\n  * @returns {Promise} A Promise that fulfills with an object containing friend information\n  * @example\n  *\n  * r.getUser('not_an_aardvark').getFriendInformation().then(console.log)\n  * // => { date: 1460318190, note: 'Is an aardvark', name: 'actually_an_aardvark', id: 't2_q3519' }\n  */\n\n  getFriendInformation() {\n    return this._get({\n      uri: \"api/v1/me/friends/\".concat(this.name)\n    });\n  }\n  /**\n  * @summary Gets a list of this user's trophies.\n  * @returns {Promise} A TrophyList containing this user's trophies\n  * @example\n  *\n  * r.getUser('not_an_aardvark').getTrophies().then(console.log)\n  * // => TrophyList { trophies: [\n  * //  Trophy { ... },\n  * //  Trophy { ... },\n  * //  ...\n  * // ] }\n  */\n\n  getTrophies() {\n    return this._get({\n      uri: \"api/v1/user/\".concat(this.name, \"/trophies\")\n    });\n  }\n  /**\n  * @summary Gets a Listing of the content this user has submitted.\n  * @param {object} [options] Options for the resulting Listing\n  * @returns {Promise} A Listing containing Submissions and Comments\n  * @example\n  *\n  * r.getUser('spez').getOverview().then(console.log)\n  * // => Listing [\n  * //  Comment { ... },\n  * //  Comment { ... },\n  * //  Submission { ... },\n  * //  ...\n  * // ]\n  */\n\n  getOverview(options) {\n    return this._getListing({\n      uri: \"user/\".concat(this.name, \"/overview\"),\n      qs: options\n    });\n  }\n  /**\n  * @summary Gets a Listing of this user's submissions.\n  * @param {object} [options] Options for the resulting Listing\n  * @returns {Promise} A Listing containing Submissions\n  * @example\n  *\n  * r.getUser('spez').getSubmissions().then(console.log)\n  * // => Listing [\n  * //  Submission { ... },\n  * //  Submission { ... },\n  * //  Submission { ... },\n  * //  ...\n  * // ]\n  */\n\n  getSubmissions(options) {\n    return this._getListing({\n      uri: \"user/\".concat(this.name, \"/submitted\"),\n      qs: options\n    });\n  }\n  /**\n  * @summary Gets a Listing of this user's comments.\n  * @param {object} [options] Options for the resulting Listing\n  * @returns {Promise} A Listing containing Comments\n  * @example\n  *\n  * r.getUser('spez').getComments().then(console.log)\n  * // => Listing [\n  * //  Comment { ... },\n  * //  Comment { ... },\n  * //  Comment { ... },\n  * //  ...\n  * // ]\n  */\n\n  getComments(options) {\n    return this._getListing({\n      uri: \"user/\".concat(this.name, \"/comments\"),\n      qs: options\n    });\n  }\n  /**\n  * @summary Gets a Listing of the content that this user has upvoted.\n  * @desc **Note**: This can only be used to view one's own upvoted content, unless the user in question has chosen to\n  make this information public in their preferences.\n  * @param {object} [options] Options for the resulting Listing\n  * @returns {Promise} A Listing containing Submissions and Comments\n  * @example\n  *\n  * r.getMe().getUpvotedContent().then(console.log)\n  * // => Listing [\n  * //  Comment { ... },\n  * //  Comment { ... },\n  * //  Submission { ... },\n  * //  ...\n  * // ]\n  */\n\n  getUpvotedContent(options) {\n    return this._getListing({\n      uri: \"user/\".concat(this.name, \"/upvoted\"),\n      qs: options\n    });\n  }\n  /**\n  * @summary Gets a Listing of the content that this user has downvoted.\n  * @desc **Note**: This can only be used to view one's own downvoted content, unless the user in question has chosen to\n  make this information public in their preferences.\n  * @param {object} [options] Options for the resulting Listing\n  * @returns {Promise} A Listing containing Submissions and Comments\n  * @example\n  *\n  * r.getMe().getDownvotedContent().then(console.log)\n  * // => Listing [\n  * //  Comment { ... },\n  * //  Comment { ... },\n  * //  Submission { ... },\n  * //  ...\n  * // ]\n  */\n\n  getDownvotedContent(options) {\n    return this._getListing({\n      uri: \"user/\".concat(this.name, \"/downvoted\"),\n      qs: options\n    });\n  }\n  /**\n  * @summary Gets a Listing of the submissions that this user has hidden.\n  * @desc **Note**: This can only be used to view one's own set of hidden posts, as reddit will return a 403 error when\n  attempting to view another users' hidden posts.\n  * @param {object} [options] Options for the resulting Listing\n  * @returns {Promise} A Listing containing Submissions\n  * @example\n  *\n  * r.getMe().getHiddenContent().then(console.log)\n  * // => Listing [\n  * //  Comment { ... },\n  * //  Comment { ... },\n  * //  Submission { ... },\n  * //  ...\n  * // ]\n  */\n\n  getHiddenContent(options) {\n    return this._getListing({\n      uri: \"user/\".concat(this.name, \"/hidden\"),\n      qs: options\n    });\n  }\n  /**\n  * @summary Gets a Listing of the content that this user has saved.\n  * @desc **Note**: This can only be used to view one's own set of saved content, as reddit will return a 403 error when\n  attempting to view other users' saved content.\n  * @param {object} [options] Options for the resulting Listing\n  * @returns {Promise} A Listing containing Submissions and Comments.\n  * @example\n  *\n  * r.getMe().getSavedContent().then(console.log)\n  * // => Listing [\n  * //  Comment { ... },\n  * //  Comment { ... },\n  * //  Submission { ... },\n  * //  ...\n  * // ]\n  */\n\n  getSavedContent(options) {\n    return this._getListing({\n      uri: \"user/\".concat(this.name, \"/saved\"),\n      qs: options\n    });\n  }\n  /**\n  * @summary Gets a Listing of this user's content which has been gilded.\n  * @param {object} [options] Options for the resulting Listing\n  * @returns {Promise} A Listing containing Submissions and Comments\n  * @example\n  *\n  * r.getMe().getGildedContent().then(console.log)\n  * // => Listing [\n  * //  Comment { ... },\n  * //  Comment { ... },\n  * //  Submission { ... },\n  * //  ...\n  * // ]\n  */\n\n  getGildedContent(options) {\n    return this._getListing({\n      uri: \"user/\".concat(this.name, \"/gilded\"),\n      qs: options\n    });\n  }\n  /**\n  * @summary Gets a multireddit belonging to this user.\n  * @param {string} name The name of the multireddit\n  * @returns {MultiReddit} An unfetched MultiReddit object\n  * @example\n  *\n  * r.getUser('multi-mod').getMultireddit('coding_languages')\n  * // => MultiReddit {\n  * //  name: 'coding_languages',\n  * //  curator: RedditUser { name: 'multi-mod' },\n  * //  path: '/user/multi-mod/m/coding_languages'\n  * // }\n  */\n\n  getMultireddit(name) {\n    return this._r._newObject('MultiReddit', {\n      name,\n      curator: this\n    });\n  }\n  /**\n  * @summary Gets an Array of all of this user's MultiReddits.\n  * @returns {Promise} A Promise that fulfills with an Array containing MultiReddits.\n  * @example\n  *\n  * r.getUser('multi-mod').getMultireddits().then(console.log)\n  *\n  * // => [\n  *   MultiReddit { ... },\n  *   MultiReddit { ... },\n  *   MultiReddit { ... },\n  *   ...\n  * ]\n  */\n\n  getMultireddits() {\n    return this._get({\n      uri: \"api/multi/user/\".concat(this.name),\n      qs: {\n        expand_srs: true\n      }\n    });\n  }\n};\nvar _default = RedditUser;\nexports.default = _default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","_constants","require","_errors","_RedditContent","_interopRequireDefault","obj","__esModule","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","configurable","writable","RedditUser","_uri","name","USERNAME_REGEX","test","InvalidUserError","concat","giveGold","months","InvalidMethodCallError","_post","uri","form","assignFlair","options","_r","_assignFlair","return","friend","_ref","undefined","note","_put","body","user","unfriend","_delete","getFriendInformation","_get","getTrophies","getOverview","_getListing","qs","getSubmissions","getComments","getUpvotedContent","getDownvotedContent","getHiddenContent","getSavedContent","getGildedContent","getMultireddit","_newObject","curator","getMultireddits","expand_srs","_default"],"sources":["/Users/zachary/Desktop/reddit-saved-gallery/node_modules/snoowrap/dist/objects/RedditUser.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _constants = require(\"../constants.js\");\n\nvar _errors = require(\"../errors.js\");\n\nvar _RedditContent = _interopRequireDefault(require(\"./RedditContent.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n* A class representing a reddit user\n* <style> #RedditUser {display: none} </style>\n* @extends ReplyableContent\n* @example\n*\n* // Get a user with the given username\n* r.getUser('spez')\n*/\nvar RedditUser = class RedditUser extends _RedditContent.default {\n  get _uri() {\n    if (typeof this.name !== 'string' || !_constants.USERNAME_REGEX.test(this.name)) {\n      throw new _errors.InvalidUserError(this.name);\n    }\n\n    return \"user/\".concat(this.name, \"/about\");\n  }\n  /**\n  * @summary Gives reddit gold to a user\n  * @param {number} months The number of months of gold to give. This must be a number between 1 and 36.\n  * @returns {Promise} A Promise that fulfills when the request is complete\n  * @example r.getUser('not_an_aardvark').giveGold(12)\n  */\n\n\n  giveGold(months) {\n    /* Ideally this would allow for more than 36 months by sending multiple requests, but I don't have the resources to test\n    that code, and it's probably better that such a big investment be deliberate anyway. */\n    if (typeof months !== 'number' || months < 1 || months > 36) {\n      throw new _errors.InvalidMethodCallError('Invalid argument to RedditUser#giveGold; `months` must be between 1 and 36.');\n    }\n\n    return this._post({\n      uri: \"api/v1/gold/give/\".concat(this.name),\n      form: {\n        months\n      }\n    });\n  }\n  /**\n  * Assigns flair to this user on a given subreddit (as a moderator).\n  * @param {object} options\n  * @param {string} options.subredditName The subreddit that flair should be assigned on\n  * @param {string} [options.text=''] The text that the user's flair should have\n  * @param {string} [options.cssClass=''] The CSS class that the user's flair should have\n  * @returns {Promise} A Promise that fulfills with the current user after the request is complete\n  * @example r.getUser('not_an_aardvark').assignFlair({subredditName: 'snoowrap', text: \"Isn't an aardvark\"})\n  */\n\n\n  assignFlair(options) {\n    return this._r._assignFlair(_objectSpread({}, options, {\n      name: this.name\n    })).return(this);\n  }\n  /**\n  * @summary Adds this user as a friend, or modifies their friend note.\n  * @desc **Note:** reddit.com only permits \"notes\" to be added on friends if the authenticated account has a subscription to\n  reddit gold.\n  * @param {object} options\n  * @param {string} [options.note] An optional note to add on the user (300 characters max)\n  * @returns {Promise} A Promise that fulfills when this request is complete\n  * @example r.getUser('actually_an_aardvark').friend({note: 'Is an aardvark'})\n  */\n\n\n  friend() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        note = _ref.note;\n\n    return this._put({\n      uri: \"api/v1/me/friends/\".concat(this.name),\n      body: {\n        user: this.name,\n        note\n      }\n    }).return(this);\n  }\n  /**\n  * @summary Removes this user from the requester's friend list.\n  * @returns {Promise} A Promise that fulfills with this user when the request is complete\n  * @example r.getUser('actually_an_aardvark').unfriend()\n  */\n\n\n  unfriend() {\n    return this._delete({\n      uri: \"api/v1/me/friends/\".concat(this.name)\n    });\n  }\n  /**\n  * @summary Gets information on this user related to their presence on the friend list.\n  * @returns {Promise} A Promise that fulfills with an object containing friend information\n  * @example\n  *\n  * r.getUser('not_an_aardvark').getFriendInformation().then(console.log)\n  * // => { date: 1460318190, note: 'Is an aardvark', name: 'actually_an_aardvark', id: 't2_q3519' }\n  */\n\n\n  getFriendInformation() {\n    return this._get({\n      uri: \"api/v1/me/friends/\".concat(this.name)\n    });\n  }\n  /**\n  * @summary Gets a list of this user's trophies.\n  * @returns {Promise} A TrophyList containing this user's trophies\n  * @example\n  *\n  * r.getUser('not_an_aardvark').getTrophies().then(console.log)\n  * // => TrophyList { trophies: [\n  * //  Trophy { ... },\n  * //  Trophy { ... },\n  * //  ...\n  * // ] }\n  */\n\n\n  getTrophies() {\n    return this._get({\n      uri: \"api/v1/user/\".concat(this.name, \"/trophies\")\n    });\n  }\n  /**\n  * @summary Gets a Listing of the content this user has submitted.\n  * @param {object} [options] Options for the resulting Listing\n  * @returns {Promise} A Listing containing Submissions and Comments\n  * @example\n  *\n  * r.getUser('spez').getOverview().then(console.log)\n  * // => Listing [\n  * //  Comment { ... },\n  * //  Comment { ... },\n  * //  Submission { ... },\n  * //  ...\n  * // ]\n  */\n\n\n  getOverview(options) {\n    return this._getListing({\n      uri: \"user/\".concat(this.name, \"/overview\"),\n      qs: options\n    });\n  }\n  /**\n  * @summary Gets a Listing of this user's submissions.\n  * @param {object} [options] Options for the resulting Listing\n  * @returns {Promise} A Listing containing Submissions\n  * @example\n  *\n  * r.getUser('spez').getSubmissions().then(console.log)\n  * // => Listing [\n  * //  Submission { ... },\n  * //  Submission { ... },\n  * //  Submission { ... },\n  * //  ...\n  * // ]\n  */\n\n\n  getSubmissions(options) {\n    return this._getListing({\n      uri: \"user/\".concat(this.name, \"/submitted\"),\n      qs: options\n    });\n  }\n  /**\n  * @summary Gets a Listing of this user's comments.\n  * @param {object} [options] Options for the resulting Listing\n  * @returns {Promise} A Listing containing Comments\n  * @example\n  *\n  * r.getUser('spez').getComments().then(console.log)\n  * // => Listing [\n  * //  Comment { ... },\n  * //  Comment { ... },\n  * //  Comment { ... },\n  * //  ...\n  * // ]\n  */\n\n\n  getComments(options) {\n    return this._getListing({\n      uri: \"user/\".concat(this.name, \"/comments\"),\n      qs: options\n    });\n  }\n  /**\n  * @summary Gets a Listing of the content that this user has upvoted.\n  * @desc **Note**: This can only be used to view one's own upvoted content, unless the user in question has chosen to\n  make this information public in their preferences.\n  * @param {object} [options] Options for the resulting Listing\n  * @returns {Promise} A Listing containing Submissions and Comments\n  * @example\n  *\n  * r.getMe().getUpvotedContent().then(console.log)\n  * // => Listing [\n  * //  Comment { ... },\n  * //  Comment { ... },\n  * //  Submission { ... },\n  * //  ...\n  * // ]\n  */\n\n\n  getUpvotedContent(options) {\n    return this._getListing({\n      uri: \"user/\".concat(this.name, \"/upvoted\"),\n      qs: options\n    });\n  }\n  /**\n  * @summary Gets a Listing of the content that this user has downvoted.\n  * @desc **Note**: This can only be used to view one's own downvoted content, unless the user in question has chosen to\n  make this information public in their preferences.\n  * @param {object} [options] Options for the resulting Listing\n  * @returns {Promise} A Listing containing Submissions and Comments\n  * @example\n  *\n  * r.getMe().getDownvotedContent().then(console.log)\n  * // => Listing [\n  * //  Comment { ... },\n  * //  Comment { ... },\n  * //  Submission { ... },\n  * //  ...\n  * // ]\n  */\n\n\n  getDownvotedContent(options) {\n    return this._getListing({\n      uri: \"user/\".concat(this.name, \"/downvoted\"),\n      qs: options\n    });\n  }\n  /**\n  * @summary Gets a Listing of the submissions that this user has hidden.\n  * @desc **Note**: This can only be used to view one's own set of hidden posts, as reddit will return a 403 error when\n  attempting to view another users' hidden posts.\n  * @param {object} [options] Options for the resulting Listing\n  * @returns {Promise} A Listing containing Submissions\n  * @example\n  *\n  * r.getMe().getHiddenContent().then(console.log)\n  * // => Listing [\n  * //  Comment { ... },\n  * //  Comment { ... },\n  * //  Submission { ... },\n  * //  ...\n  * // ]\n  */\n\n\n  getHiddenContent(options) {\n    return this._getListing({\n      uri: \"user/\".concat(this.name, \"/hidden\"),\n      qs: options\n    });\n  }\n  /**\n  * @summary Gets a Listing of the content that this user has saved.\n  * @desc **Note**: This can only be used to view one's own set of saved content, as reddit will return a 403 error when\n  attempting to view other users' saved content.\n  * @param {object} [options] Options for the resulting Listing\n  * @returns {Promise} A Listing containing Submissions and Comments.\n  * @example\n  *\n  * r.getMe().getSavedContent().then(console.log)\n  * // => Listing [\n  * //  Comment { ... },\n  * //  Comment { ... },\n  * //  Submission { ... },\n  * //  ...\n  * // ]\n  */\n\n\n  getSavedContent(options) {\n    return this._getListing({\n      uri: \"user/\".concat(this.name, \"/saved\"),\n      qs: options\n    });\n  }\n  /**\n  * @summary Gets a Listing of this user's content which has been gilded.\n  * @param {object} [options] Options for the resulting Listing\n  * @returns {Promise} A Listing containing Submissions and Comments\n  * @example\n  *\n  * r.getMe().getGildedContent().then(console.log)\n  * // => Listing [\n  * //  Comment { ... },\n  * //  Comment { ... },\n  * //  Submission { ... },\n  * //  ...\n  * // ]\n  */\n\n\n  getGildedContent(options) {\n    return this._getListing({\n      uri: \"user/\".concat(this.name, \"/gilded\"),\n      qs: options\n    });\n  }\n  /**\n  * @summary Gets a multireddit belonging to this user.\n  * @param {string} name The name of the multireddit\n  * @returns {MultiReddit} An unfetched MultiReddit object\n  * @example\n  *\n  * r.getUser('multi-mod').getMultireddit('coding_languages')\n  * // => MultiReddit {\n  * //  name: 'coding_languages',\n  * //  curator: RedditUser { name: 'multi-mod' },\n  * //  path: '/user/multi-mod/m/coding_languages'\n  * // }\n  */\n\n\n  getMultireddit(name) {\n    return this._r._newObject('MultiReddit', {\n      name,\n      curator: this\n    });\n  }\n  /**\n  * @summary Gets an Array of all of this user's MultiReddits.\n  * @returns {Promise} A Promise that fulfills with an Array containing MultiReddits.\n  * @example\n  *\n  * r.getUser('multi-mod').getMultireddits().then(console.log)\n  *\n  * // => [\n  *   MultiReddit { ... },\n  *   MultiReddit { ... },\n  *   MultiReddit { ... },\n  *   ...\n  * ]\n  */\n\n\n  getMultireddits() {\n    return this._get({\n      uri: \"api/multi/user/\".concat(this.name),\n      qs: {\n        expand_srs: true\n      }\n    });\n  }\n\n};\nvar _default = RedditUser;\nexports.default = _default;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}