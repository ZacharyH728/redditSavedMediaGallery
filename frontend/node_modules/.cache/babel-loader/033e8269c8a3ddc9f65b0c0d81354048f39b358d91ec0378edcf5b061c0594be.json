{"ast":null,"code":"var _jsxFileName = \"/Users/zachary/Desktop/reddit-saved-gallery/src/components/MediaGallery.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport axios from 'axios';\nimport MediaItem from './MediaItem';\nimport LoadingSpinner from './LoadingSpinner';\nimport './MediaGallery.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MediaGallery({\n  token\n}) {\n  _s();\n  const [posts, setPosts] = useState([]);\n  const [originalPosts, setOriginalPosts] = useState([]); // Store original order\n  const [loading, setLoading] = useState(true);\n  const [initialLoading, setInitialLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [username, setUsername] = useState('');\n  const [visiblePosts, setVisiblePosts] = useState(1);\n  const [hasMore, setHasMore] = useState(true);\n  const [isRandomOrder, setIsRandomOrder] = useState(true); // Track current mode\n\n  // Reference to observe the last post for infinite scrolling\n  const observer = useRef();\n  const lastPostElementRef = useCallback(node => {\n    if (loading) return;\n    if (observer.current) observer.current.disconnect();\n    observer.current = new IntersectionObserver(entries => {\n      if (entries[0].isIntersecting && hasMore) {\n        setVisiblePosts(prevVisiblePosts => Math.min(prevVisiblePosts + 1, posts.length));\n        if (visiblePosts >= posts.length - 1) {\n          setHasMore(false);\n        }\n      }\n    }, {\n      threshold: 0.5\n    });\n    if (node) observer.current.observe(node);\n  }, [loading, hasMore, posts.length, visiblePosts]);\n\n  // Fisher-Yates shuffle algorithm for randomizing posts\n  const shuffleArray = array => {\n    const shuffled = [...array];\n    for (let i = shuffled.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];\n    }\n    return shuffled;\n  };\n  useEffect(() => {\n    const fetchSavedMedia = async () => {\n      if (!token) return;\n      try {\n        setLoading(true);\n\n        // Get user info through proxy\n        console.log(\"Fetching user info...\");\n        const userResponse = await axios.get('http://localhost:4000/api/me', {\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        });\n        const userInfo = userResponse.data;\n        setUsername(userInfo.name);\n        console.log(`Fetching saved posts for ${userInfo.name}...`);\n        // Get saved posts through proxy\n        const savedResponse = await axios.get(`http://localhost:4000/api/saved/${userInfo.name}`, {\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        });\n\n        // Extract posts and filter for media\n        const savedItems = savedResponse.data.data.children.map(child => child.data).filter(post => {\n          // Check if it's a submission (not a comment)\n          if (!post.title) return false;\n\n          // Check for various media types\n          return post.is_video || post.post_hint === 'image' || post.url.match(/\\.(jpg|jpeg|png|gif)$/) || post.url.includes('imgur.com') || post.url.includes('gfycat.com') || post.url.includes('redgifs.com') || post.url.includes('i.redd.it');\n        });\n        console.log(`Found ${savedItems.length} media posts`);\n\n        // Store original order\n        setOriginalPosts(savedItems);\n\n        // Start with randomized order by default\n        const randomizedPosts = shuffleArray(savedItems);\n        setPosts(randomizedPosts);\n\n        // If there are posts, start with 1 visible\n        if (savedItems.length > 0) {\n          setVisiblePosts(1);\n          setHasMore(savedItems.length > 1);\n        } else {\n          setHasMore(false);\n        }\n      } catch (err) {\n        var _err$response, _err$response2, _err$response2$data;\n        console.error('Error fetching saved media:', err);\n        console.error('Response data:', (_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.data);\n        setError(`Failed to load your saved posts: ${((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.error) || err.message}`);\n      } finally {\n        setLoading(false);\n        setInitialLoading(false);\n      }\n    };\n    fetchSavedMedia();\n  }, [token]);\n\n  // Toggle between random and default order\n  const toggleOrderMode = () => {\n    setInitialLoading(true);\n    // Short timeout to allow loading state to render\n    setTimeout(() => {\n      if (isRandomOrder) {\n        // Switch to original order\n        setPosts([...originalPosts]);\n        setIsRandomOrder(false);\n      } else {\n        // Switch to random order\n        const randomizedPosts = shuffleArray(originalPosts);\n        setPosts(randomizedPosts);\n        setIsRandomOrder(true);\n      }\n      setVisiblePosts(1);\n      setHasMore(originalPosts.length > 1);\n      setInitialLoading(false);\n    }, 300);\n  };\n\n  // Reshuffle posts (only in random mode)\n  const handleReshuffle = () => {\n    if (!isRandomOrder) {\n      toggleOrderMode(); // Switch to random mode first\n      return;\n    }\n    setInitialLoading(true);\n    // Short timeout to allow loading state to render\n    setTimeout(() => {\n      const randomizedPosts = shuffleArray(originalPosts);\n      setPosts(randomizedPosts);\n      setVisiblePosts(1);\n      setHasMore(randomizedPosts.length > 1);\n      setInitialLoading(false);\n    }, 300);\n  };\n  if (initialLoading) return /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 167,\n    columnNumber: 30\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"error-message\",\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 169,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"gallery-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gallery-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Saved Media for u/\", username]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Showing \", Math.min(visiblePosts, posts.length), \" of \", posts.length, \" saved media posts\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: `order-toggle-button ${isRandomOrder ? 'random-active' : 'default-active'}`,\n          onClick: toggleOrderMode,\n          children: isRandomOrder ? 'Switch to Default Order' : 'Switch to Random Order'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 11\n        }, this), isRandomOrder && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"reshuffle-button\",\n          onClick: handleReshuffle,\n          children: \"Shuffle Again\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }, this), posts.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"no-media\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No media found in your saved posts.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Try saving some posts with images, videos, or GIFs!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 9\n    }, this) :\n    /*#__PURE__*/\n    // Replace the media-feed section with:\n    _jsxDEV(\"div\", {\n      className: \"media-feed\",\n      children: [posts.slice(0, visiblePosts).map((post, index) => {\n        // Add ref to last post for infinite scrolling\n        if (index === visiblePosts - 1) {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: lastPostElementRef,\n            className: \"post-container\",\n            children: [/*#__PURE__*/_jsxDEV(MediaItem, {\n              post: post\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 204,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"post-separator\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 206,\n              columnNumber: 19\n            }, this)]\n          }, post.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 17\n          }, this);\n        } else {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"post-container\",\n            children: [/*#__PURE__*/_jsxDEV(MediaItem, {\n              post: post\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 212,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"post-separator\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 19\n            }, this)]\n          }, post.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 17\n          }, this);\n        }\n      }), loading && /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 23\n      }, this), !hasMore && posts.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"end-message\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"You've reached the end of your saved posts!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"end-buttons\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"order-toggle-button\",\n            onClick: toggleOrderMode,\n            children: isRandomOrder ? 'View in Default Order' : 'View in Random Order'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 17\n          }, this), isRandomOrder && /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"reshuffle-button\",\n            onClick: handleReshuffle,\n            children: \"Shuffle Again\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 172,\n    columnNumber: 5\n  }, this);\n}\n_s(MediaGallery, \"cJrPR+QE3D/E5AEjjL8sx0NHU7Q=\");\n_c = MediaGallery;\nexport default MediaGallery;\nvar _c;\n$RefreshReg$(_c, \"MediaGallery\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","axios","MediaItem","LoadingSpinner","jsxDEV","_jsxDEV","MediaGallery","token","_s","posts","setPosts","originalPosts","setOriginalPosts","loading","setLoading","initialLoading","setInitialLoading","error","setError","username","setUsername","visiblePosts","setVisiblePosts","hasMore","setHasMore","isRandomOrder","setIsRandomOrder","observer","lastPostElementRef","node","current","disconnect","IntersectionObserver","entries","isIntersecting","prevVisiblePosts","Math","min","length","threshold","observe","shuffleArray","array","shuffled","i","j","floor","random","fetchSavedMedia","console","log","userResponse","get","headers","userInfo","data","name","savedResponse","savedItems","children","map","child","filter","post","title","is_video","post_hint","url","match","includes","randomizedPosts","err","_err$response","_err$response2","_err$response2$data","response","message","toggleOrderMode","setTimeout","handleReshuffle","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","slice","index","ref","id","_c","$RefreshReg$"],"sources":["/Users/zachary/Desktop/reddit-saved-gallery/src/components/MediaGallery.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport axios from 'axios';\nimport MediaItem from './MediaItem';\nimport LoadingSpinner from './LoadingSpinner';\nimport './MediaGallery.css';\n\nfunction MediaGallery({ token }) {\n  const [posts, setPosts] = useState([]);\n  const [originalPosts, setOriginalPosts] = useState([]); // Store original order\n  const [loading, setLoading] = useState(true);\n  const [initialLoading, setInitialLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [username, setUsername] = useState('');\n  const [visiblePosts, setVisiblePosts] = useState(1);\n  const [hasMore, setHasMore] = useState(true);\n  const [isRandomOrder, setIsRandomOrder] = useState(true); // Track current mode\n\n  // Reference to observe the last post for infinite scrolling\n  const observer = useRef();\n  const lastPostElementRef = useCallback(node => {\n    if (loading) return;\n    if (observer.current) observer.current.disconnect();\n\n    observer.current = new IntersectionObserver(entries => {\n      if (entries[0].isIntersecting && hasMore) {\n        setVisiblePosts(prevVisiblePosts =>\n          Math.min(prevVisiblePosts + 1, posts.length)\n        );\n\n        if (visiblePosts >= posts.length - 1) {\n          setHasMore(false);\n        }\n      }\n    }, { threshold: 0.5 });\n\n    if (node) observer.current.observe(node);\n  }, [loading, hasMore, posts.length, visiblePosts]);\n\n  // Fisher-Yates shuffle algorithm for randomizing posts\n  const shuffleArray = (array) => {\n    const shuffled = [...array];\n    for (let i = shuffled.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];\n    }\n    return shuffled;\n  };\n\n  useEffect(() => {\n    const fetchSavedMedia = async () => {\n      if (!token) return;\n\n      try {\n        setLoading(true);\n\n        // Get user info through proxy\n        console.log(\"Fetching user info...\");\n        const userResponse = await axios.get('http://localhost:4000/api/me', {\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        });\n\n        const userInfo = userResponse.data;\n        setUsername(userInfo.name);\n\n        console.log(`Fetching saved posts for ${userInfo.name}...`);\n        // Get saved posts through proxy\n        const savedResponse = await axios.get(\n          `http://localhost:4000/api/saved/${userInfo.name}`,\n          {\n            headers: {\n              'Authorization': `Bearer ${token}`\n            }\n          }\n        );\n\n        // Extract posts and filter for media\n        const savedItems = savedResponse.data.data.children\n          .map(child => child.data)\n          .filter(post => {\n            // Check if it's a submission (not a comment)\n            if (!post.title) return false;\n\n            // Check for various media types\n            return (\n              post.is_video ||\n              post.post_hint === 'image' ||\n              post.url.match(/\\.(jpg|jpeg|png|gif)$/) ||\n              post.url.includes('imgur.com') ||\n              post.url.includes('gfycat.com') ||\n              post.url.includes('redgifs.com') ||\n              post.url.includes('i.redd.it')\n            );\n          });\n\n        console.log(`Found ${savedItems.length} media posts`);\n\n        // Store original order\n        setOriginalPosts(savedItems);\n\n        // Start with randomized order by default\n        const randomizedPosts = shuffleArray(savedItems);\n        setPosts(randomizedPosts);\n\n        // If there are posts, start with 1 visible\n        if (savedItems.length > 0) {\n          setVisiblePosts(1);\n          setHasMore(savedItems.length > 1);\n        } else {\n          setHasMore(false);\n        }\n\n      } catch (err) {\n        console.error('Error fetching saved media:', err);\n        console.error('Response data:', err.response?.data);\n        setError(`Failed to load your saved posts: ${err.response?.data?.error || err.message}`);\n      } finally {\n        setLoading(false);\n        setInitialLoading(false);\n      }\n    };\n\n    fetchSavedMedia();\n  }, [token]);\n\n  // Toggle between random and default order\n  const toggleOrderMode = () => {\n    setInitialLoading(true);\n    // Short timeout to allow loading state to render\n    setTimeout(() => {\n      if (isRandomOrder) {\n        // Switch to original order\n        setPosts([...originalPosts]);\n        setIsRandomOrder(false);\n      } else {\n        // Switch to random order\n        const randomizedPosts = shuffleArray(originalPosts);\n        setPosts(randomizedPosts);\n        setIsRandomOrder(true);\n      }\n\n      setVisiblePosts(1);\n      setHasMore(originalPosts.length > 1);\n      setInitialLoading(false);\n    }, 300);\n  };\n\n  // Reshuffle posts (only in random mode)\n  const handleReshuffle = () => {\n    if (!isRandomOrder) {\n      toggleOrderMode(); // Switch to random mode first\n      return;\n    }\n\n    setInitialLoading(true);\n    // Short timeout to allow loading state to render\n    setTimeout(() => {\n      const randomizedPosts = shuffleArray(originalPosts);\n      setPosts(randomizedPosts);\n      setVisiblePosts(1);\n      setHasMore(randomizedPosts.length > 1);\n      setInitialLoading(false);\n    }, 300);\n  };\n\n  if (initialLoading) return <LoadingSpinner />;\n\n  if (error) return <div className=\"error-message\">{error}</div>;\n\n  return (\n    <div className=\"gallery-container\">\n      <div className=\"gallery-header\">\n        <h2>Saved Media for u/{username}</h2>\n        <p>Showing {Math.min(visiblePosts, posts.length)} of {posts.length} saved media posts</p>\n        <div className=\"header-buttons\">\n          <button\n            className={`order-toggle-button ${isRandomOrder ? 'random-active' : 'default-active'}`}\n            onClick={toggleOrderMode}\n          >\n            {isRandomOrder ? 'Switch to Default Order' : 'Switch to Random Order'}\n          </button>\n          {isRandomOrder && (\n            <button className=\"reshuffle-button\" onClick={handleReshuffle}>\n              Shuffle Again\n            </button>\n          )}\n        </div>\n      </div>\n\n      {posts.length === 0 ? (\n        <div className=\"no-media\">\n          <p>No media found in your saved posts.</p>\n          <p>Try saving some posts with images, videos, or GIFs!</p>\n        </div>\n      ) : (\n        // Replace the media-feed section with:\n        <div className=\"media-feed\">\n          {posts.slice(0, visiblePosts).map((post, index) => {\n            // Add ref to last post for infinite scrolling\n            if (index === visiblePosts - 1) {\n              return (\n                <div ref={lastPostElementRef} key={post.id} className=\"post-container\">\n                  <MediaItem post={post} />\n                  {/* Add explicit separator */}\n                  <div className=\"post-separator\"></div>\n                </div>\n              );\n            } else {\n              return (\n                <div key={post.id} className=\"post-container\">\n                  <MediaItem post={post} />\n                  {/* Add explicit separator */}\n                  <div className=\"post-separator\"></div>\n                </div>\n              );\n            }\n          })}\n          {loading && <LoadingSpinner />}\n          {!hasMore && posts.length > 0 && (\n            <div className=\"end-message\">\n              <p>You've reached the end of your saved posts!</p>\n              <div className=\"end-buttons\">\n                <button\n                  className=\"order-toggle-button\"\n                  onClick={toggleOrderMode}\n                >\n                  {isRandomOrder ? 'View in Default Order' : 'View in Random Order'}\n                </button>\n                {isRandomOrder && (\n                  <button className=\"reshuffle-button\" onClick={handleReshuffle}>\n                    Shuffle Again\n                  </button>\n                )}\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default MediaGallery;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}