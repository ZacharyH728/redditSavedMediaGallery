{"ast":null,"code":"var _jsxFileName = \"/Users/zachary/Desktop/reddit-saved-gallery/src/components/MediaItem.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './MediaItem.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MediaItem({\n  post\n}) {\n  _s();\n  const [loaded, setLoaded] = useState(false);\n  const [error, setError] = useState(false);\n  const [showInfo, setShowInfo] = useState(true);\n\n  // Get media URL based on post type\n  const getMediaUrl = post => {\n    // Handle direct image links\n    if (post.url.match(/\\.(jpg|jpeg|png|gif)$/i)) {\n      return {\n        type: 'image',\n        url: post.url\n      };\n    }\n\n    // Handle Reddit videos\n    if (post.is_video && post.media && post.media.reddit_video) {\n      return {\n        type: 'video',\n        url: post.media.reddit_video.fallback_url\n      };\n    }\n\n    // Handle redgifs - various patterns\n    if (post.url.includes('redgifs.com') || post.domain === 'redgifs.com' || post.preview && post.preview.reddit_video_preview) {\n      // Extract redgif ID\n      let redgifId = null;\n\n      // Pattern: redgifs.com/watch/[id]\n      if (post.url.includes('/watch/')) {\n        var _post$url$split$;\n        redgifId = (_post$url$split$ = post.url.split('/watch/')[1]) === null || _post$url$split$ === void 0 ? void 0 : _post$url$split$.split(/[?#]/)[0];\n      }\n      // Pattern: redgifs.com/[id]\n      else if (post.url.match(/redgifs\\.com\\/\\w+/)) {\n        var _post$url$split$2;\n        redgifId = (_post$url$split$2 = post.url.split('redgifs.com/')[1]) === null || _post$url$split$2 === void 0 ? void 0 : _post$url$split$2.split(/[?#]/)[0];\n      }\n      if (redgifId) {\n        return {\n          type: 'redgif',\n          id: redgifId,\n          url: `https://redgifs.com/watch/${redgifId}`\n        };\n      }\n\n      // Fallback: return the URL for direct opening\n      return {\n        type: 'link',\n        provider: 'redgif',\n        url: post.url\n      };\n    }\n\n    // Handle imgur links without extension\n    if (post.url.includes('imgur.com') && !post.url.match(/\\.(jpg|jpeg|png|gif)$/i)) {\n      return {\n        type: 'image',\n        url: `${post.url}.jpg`\n      };\n    }\n\n    // Handle gfycat links\n    if (post.url.includes('gfycat.com')) {\n      const gfycatId = post.url.split('/').pop().split('-')[0];\n      // First try the mp4 version\n      return {\n        type: 'video',\n        url: `https://giant.gfycat.com/${gfycatId}.mp4`\n      };\n    }\n\n    // If we can detect it's an image post\n    if (post.post_hint === 'image' || post.url.includes('i.redd.it')) {\n      return {\n        type: 'image',\n        url: post.url\n      };\n    }\n\n    // Default case - check if preview available\n    if (post.preview && post.preview.images && post.preview.images[0]) {\n      const preview = post.preview.images[0];\n      if (preview.source) {\n        return {\n          type: 'image',\n          url: preview.source.url.replace(/&amp;/g, '&')\n        };\n      }\n    }\n\n    // Last resort - use thumbnail\n    if (post.thumbnail && post.thumbnail !== 'default' && post.thumbnail !== 'self') {\n      return {\n        type: 'image',\n        url: post.thumbnail\n      };\n    }\n\n    // Nothing worked, return link\n    return {\n      type: 'link',\n      url: post.url\n    };\n  };\n\n  // Process the media information\n  const mediaInfo = getMediaUrl(post);\n  const handleLoad = () => setLoaded(true);\n  const handleError = () => setError(true);\n\n  // Toggle info panel when clicking on media\n  const toggleInfo = () => {\n    setShowInfo(!showInfo);\n  };\n\n  // Render different content based on media type\n  const renderMedia = () => {\n    if (error) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"media-error\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Failed to load media\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          href: mediaInfo.url,\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          className: \"original-link\",\n          children: \"Open original\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this);\n    }\n    switch (mediaInfo.type) {\n      case 'image':\n        return /*#__PURE__*/_jsxDEV(\"img\", {\n          src: mediaInfo.url,\n          alt: post.title,\n          onLoad: handleLoad,\n          onError: handleError,\n          className: \"centered-media\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this);\n      case 'video':\n        return /*#__PURE__*/_jsxDEV(\"video\", {\n          controls: true,\n          loop: true,\n          muted: true,\n          onLoadedData: handleLoad,\n          onError: handleError,\n          src: mediaInfo.url,\n          className: \"centered-media\",\n          onClick: e => e.stopPropagation() // Prevent video controls from toggling info\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }, this);\n      case 'redgif':\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"redgif-embed-container\",\n          children: /*#__PURE__*/_jsxDEV(\"iframe\", {\n            src: `https://redgifs.com/ifr/${mediaInfo.id}`,\n            frameBorder: \"0\",\n            scrolling: \"no\",\n            width: \"100%\",\n            height: \"100%\",\n            allowFullScreen: true,\n            title: `Redgif - ${mediaInfo.id}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 11\n        }, this);\n      case 'link':\n      default:\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"media-link\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"This content cannot be displayed directly\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n            href: mediaInfo.url,\n            target: \"_blank\",\n            rel: \"noopener noreferrer\",\n            className: \"original-link\",\n            children: \"Open original content\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 13\n          }, this), post.thumbnail && post.thumbnail !== 'default' && post.thumbnail !== 'self' && /*#__PURE__*/_jsxDEV(\"img\", {\n            src: post.thumbnail,\n            alt: \"Thumbnail\",\n            className: \"content-thumbnail\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 11\n        }, this);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"media-item\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"media-content\",\n      onClick: toggleInfo,\n      children: [!loaded && !error && mediaInfo.type !== 'redgif' && mediaInfo.type !== 'link' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"media-loading\",\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 11\n      }, this), renderMedia()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this), showInfo && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"media-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"post-title\",\n        children: post.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post-details\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"subreddit\",\n          children: [\"r/\", post.subreddit]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"author\",\n          children: [\"Posted by u/\", post.author]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        href: `https://reddit.com${post.permalink}`,\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        className: \"view-post-button\",\n        children: \"View on Reddit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 170,\n    columnNumber: 5\n  }, this);\n}\n_s(MediaItem, \"idWSJJDjKyAM198WWGNouJRlmtw=\");\n_c = MediaItem;\nexport default MediaItem;\nvar _c;\n$RefreshReg$(_c, \"MediaItem\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","MediaItem","post","_s","loaded","setLoaded","error","setError","showInfo","setShowInfo","getMediaUrl","url","match","type","is_video","media","reddit_video","fallback_url","includes","domain","preview","reddit_video_preview","redgifId","_post$url$split$","split","_post$url$split$2","id","provider","gfycatId","pop","post_hint","images","source","replace","thumbnail","mediaInfo","handleLoad","handleError","toggleInfo","renderMedia","className","children","fileName","_jsxFileName","lineNumber","columnNumber","href","target","rel","src","alt","title","onLoad","onError","controls","loop","muted","onLoadedData","onClick","e","stopPropagation","frameBorder","scrolling","width","height","allowFullScreen","subreddit","author","permalink","_c","$RefreshReg$"],"sources":["/Users/zachary/Desktop/reddit-saved-gallery/src/components/MediaItem.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './MediaItem.css';\n\nfunction MediaItem({ post }) {\n  const [loaded, setLoaded] = useState(false);\n  const [error, setError] = useState(false);\n  const [showInfo, setShowInfo] = useState(true);\n  \n  // Get media URL based on post type\n  const getMediaUrl = (post) => {\n    // Handle direct image links\n    if (post.url.match(/\\.(jpg|jpeg|png|gif)$/i)) {\n      return { type: 'image', url: post.url };\n    }\n    \n    // Handle Reddit videos\n    if (post.is_video && post.media && post.media.reddit_video) {\n      return { type: 'video', url: post.media.reddit_video.fallback_url };\n    }\n    \n    // Handle redgifs - various patterns\n    if (post.url.includes('redgifs.com') || \n        post.domain === 'redgifs.com' || \n        (post.preview && post.preview.reddit_video_preview)) {\n      \n      // Extract redgif ID\n      let redgifId = null;\n      \n      // Pattern: redgifs.com/watch/[id]\n      if (post.url.includes('/watch/')) {\n        redgifId = post.url.split('/watch/')[1]?.split(/[?#]/)[0];\n      } \n      // Pattern: redgifs.com/[id]\n      else if (post.url.match(/redgifs\\.com\\/\\w+/)) {\n        redgifId = post.url.split('redgifs.com/')[1]?.split(/[?#]/)[0];\n      }\n      \n      if (redgifId) {\n        return { \n          type: 'redgif', \n          id: redgifId,\n          url: `https://redgifs.com/watch/${redgifId}`\n        };\n      }\n      \n      // Fallback: return the URL for direct opening\n      return { type: 'link', provider: 'redgif', url: post.url };\n    }\n    \n    // Handle imgur links without extension\n    if (post.url.includes('imgur.com') && !post.url.match(/\\.(jpg|jpeg|png|gif)$/i)) {\n      return { type: 'image', url: `${post.url}.jpg` };\n    }\n    \n    // Handle gfycat links\n    if (post.url.includes('gfycat.com')) {\n      const gfycatId = post.url.split('/').pop().split('-')[0];\n      // First try the mp4 version\n      return { type: 'video', url: `https://giant.gfycat.com/${gfycatId}.mp4` };\n    }\n    \n    // If we can detect it's an image post\n    if (post.post_hint === 'image' || post.url.includes('i.redd.it')) {\n      return { type: 'image', url: post.url };\n    }\n    \n    // Default case - check if preview available\n    if (post.preview && post.preview.images && post.preview.images[0]) {\n      const preview = post.preview.images[0];\n      if (preview.source) {\n        return { type: 'image', url: preview.source.url.replace(/&amp;/g, '&') };\n      }\n    }\n    \n    // Last resort - use thumbnail\n    if (post.thumbnail && post.thumbnail !== 'default' && post.thumbnail !== 'self') {\n      return { type: 'image', url: post.thumbnail };\n    }\n    \n    // Nothing worked, return link\n    return { type: 'link', url: post.url };\n  };\n  \n  // Process the media information\n  const mediaInfo = getMediaUrl(post);\n  \n  const handleLoad = () => setLoaded(true);\n  const handleError = () => setError(true);\n  \n  // Toggle info panel when clicking on media\n  const toggleInfo = () => {\n    setShowInfo(!showInfo);\n  };\n\n  // Render different content based on media type\n  const renderMedia = () => {\n    if (error) {\n      return (\n        <div className=\"media-error\">\n          <p>Failed to load media</p>\n          <a href={mediaInfo.url} target=\"_blank\" rel=\"noopener noreferrer\" className=\"original-link\">\n            Open original\n          </a>\n        </div>\n      );\n    }\n    \n    switch (mediaInfo.type) {\n      case 'image':\n        return (\n          <img \n            src={mediaInfo.url}\n            alt={post.title}\n            onLoad={handleLoad}\n            onError={handleError}\n            className=\"centered-media\"\n          />\n        );\n      \n      case 'video':\n        return (\n          <video \n            controls\n            loop\n            muted\n            onLoadedData={handleLoad}\n            onError={handleError}\n            src={mediaInfo.url}\n            className=\"centered-media\"\n            onClick={(e) => e.stopPropagation()} // Prevent video controls from toggling info\n          />\n        );\n      \n      case 'redgif':\n        return (\n          <div className=\"redgif-embed-container\">\n            <iframe \n              src={`https://redgifs.com/ifr/${mediaInfo.id}`}\n              frameBorder=\"0\" \n              scrolling=\"no\" \n              width=\"100%\" \n              height=\"100%\" \n              allowFullScreen\n              title={`Redgif - ${mediaInfo.id}`}\n            ></iframe>\n          </div>\n        );\n      \n      case 'link':\n      default:\n        return (\n          <div className=\"media-link\">\n            <p>This content cannot be displayed directly</p>\n            <a href={mediaInfo.url} target=\"_blank\" rel=\"noopener noreferrer\" className=\"original-link\">\n              Open original content\n            </a>\n            {post.thumbnail && post.thumbnail !== 'default' && post.thumbnail !== 'self' && (\n              <img \n                src={post.thumbnail}\n                alt=\"Thumbnail\"\n                className=\"content-thumbnail\"\n              />\n            )}\n          </div>\n        );\n    }\n  };\n\n  return (\n    <div className=\"media-item\">\n      <div className=\"media-content\" onClick={toggleInfo}>\n        {!loaded && !error && mediaInfo.type !== 'redgif' && mediaInfo.type !== 'link' && (\n          <div className=\"media-loading\">Loading...</div>\n        )}\n        \n        {renderMedia()}\n      </div>\n      \n      {showInfo && (\n        <div className=\"media-info\">\n          <h3 className=\"post-title\">{post.title}</h3>\n          <div className=\"post-details\">\n            <span className=\"subreddit\">r/{post.subreddit}</span>\n            <span className=\"author\">Posted by u/{post.author}</span>\n          </div>\n          <a \n            href={`https://reddit.com${post.permalink}`}\n            target=\"_blank\" \n            rel=\"noopener noreferrer\"\n            className=\"view-post-button\"\n          >\n            View on Reddit\n          </a>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default MediaItem;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}