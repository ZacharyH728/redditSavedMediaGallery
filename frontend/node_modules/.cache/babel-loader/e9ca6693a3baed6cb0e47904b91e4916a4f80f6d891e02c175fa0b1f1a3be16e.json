{"ast":null,"code":"var _jsxFileName = \"/Users/zachary/Desktop/reddit-saved-gallery/src/components/MediaItem.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './MediaItem.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MediaItem({\n  post\n}) {\n  _s();\n  const [loaded, setLoaded] = useState(false);\n  const [error, setError] = useState(false);\n  const [showInfo, setShowInfo] = useState(true);\n  const [redgifEmbed, setRedgifEmbed] = useState(null);\n\n  // Get media URL based on post type\n  const getMediaUrl = post => {\n    // Handle direct image links\n    if (post.url.match(/\\.(jpg|jpeg|png|gif)$/i)) {\n      return {\n        type: 'image',\n        url: post.url\n      };\n    }\n\n    // Handle Reddit videos\n    if (post.is_video && post.media && post.media.reddit_video) {\n      return {\n        type: 'video',\n        url: post.media.reddit_video.fallback_url\n      };\n    }\n\n    // Handle redgifs - various patterns\n    if (post.url.includes('redgifs.com') || post.domain === 'redgifs.com' || post.preview && post.preview.reddit_video_preview) {\n      // First check for embedded redgif data in the post\n      if (post.media && post.media.oembed) {\n        return {\n          type: 'embed',\n          provider: 'redgif',\n          embedCode: post.media.oembed.html,\n          url: post.url\n        };\n      }\n\n      // Check for redgif URL patterns\n      let redgifId = null;\n\n      // Pattern: redgifs.com/watch/[id]\n      if (post.url.includes('/watch/')) {\n        redgifId = post.url.split('/watch/')[1].split(/[?#]/)[0];\n      }\n      // Pattern: redgifs.com/[id]\n      else if (post.url.match(/redgifs\\.com\\/\\w+/)) {\n        redgifId = post.url.split('redgifs.com/')[1].split(/[?#]/)[0];\n      }\n      if (redgifId) {\n        return {\n          type: 'embed',\n          provider: 'redgif',\n          id: redgifId,\n          url: `https://redgifs.com/watch/${redgifId}`\n        };\n      }\n\n      // Fallback: return the URL for direct opening\n      return {\n        type: 'link',\n        provider: 'redgif',\n        url: post.url\n      };\n    }\n\n    // Handle imgur links without extension\n    if (post.url.includes('imgur.com') && !post.url.match(/\\.(jpg|jpeg|png|gif)$/i)) {\n      return {\n        type: 'image',\n        url: `${post.url}.jpg`\n      };\n    }\n\n    // Handle gfycat links\n    if (post.url.includes('gfycat.com')) {\n      const gfycatId = post.url.split('/').pop().split('-')[0];\n      // First try the mp4 version\n      return {\n        type: 'video',\n        url: `https://giant.gfycat.com/${gfycatId}.mp4`\n      };\n    }\n\n    // If we can detect it's an image post\n    if (post.post_hint === 'image' || post.url.includes('i.redd.it')) {\n      return {\n        type: 'image',\n        url: post.url\n      };\n    }\n\n    // Default case - check if preview available\n    if (post.preview && post.preview.images && post.preview.images[0]) {\n      const preview = post.preview.images[0];\n      if (preview.source) {\n        return {\n          type: 'image',\n          url: preview.source.url.replace(/&amp;/g, '&')\n        };\n      }\n    }\n\n    // Last resort - use thumbnail\n    if (post.thumbnail && post.thumbnail !== 'default' && post.thumbnail !== 'self') {\n      return {\n        type: 'image',\n        url: post.thumbnail\n      };\n    }\n\n    // Nothing worked, return link\n    return {\n      type: 'link',\n      url: post.url\n    };\n  };\n\n  // Process the media information\n  const mediaInfo = getMediaUrl(post);\n\n  // For redgif embeds, we'll use an iframe\n  useEffect(() => {\n    if (mediaInfo.type === 'embed' && mediaInfo.provider === 'redgif') {\n      if (mediaInfo.embedCode) {\n        // Directly use provided embed code if available\n        setRedgifEmbed(mediaInfo.embedCode);\n      } else if (mediaInfo.id) {\n        // Create embed code for redgif ID\n        const embedHtml = `<iframe src=\"https://redgifs.com/ifr/${mediaInfo.id}\" \n                                   frameborder=\"0\" scrolling=\"no\" \n                                   width=\"100%\" height=\"100%\" \n                                   allowfullscreen></iframe>`;\n        setRedgifEmbed(embedHtml);\n      }\n    }\n  }, [mediaInfo]);\n  const handleLoad = () => setLoaded(true);\n  const handleError = () => setError(true);\n\n  // Toggle info panel when clicking on media\n  const toggleInfo = () => {\n    setShowInfo(!showInfo);\n  };\n\n  // Render different content based on media type\n  const renderMedia = () => {\n    if (error) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"media-error\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Failed to load media\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          href: mediaInfo.url,\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          className: \"original-link\",\n          children: \"Open original\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this);\n    }\n    switch (mediaInfo.type) {\n      case 'image':\n        return /*#__PURE__*/_jsxDEV(\"img\", {\n          src: mediaInfo.url,\n          alt: post.title,\n          onLoad: handleLoad,\n          onError: handleError,\n          className: \"centered-media\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 11\n        }, this);\n      case 'video':\n        return /*#__PURE__*/_jsxDEV(\"video\", {\n          controls: true,\n          loop: true,\n          muted: true,\n          onLoadedData: handleLoad,\n          onError: handleError,\n          src: mediaInfo.url,\n          className: \"centered-media\",\n          onClick: e => e.stopPropagation() // Prevent video controls from toggling info\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 11\n        }, this);\n      case 'embed':\n        if (mediaInfo.provider === 'redgif' && redgifEmbed) {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"redgif-embed-container\",\n            dangerouslySetInnerHTML: {\n              __html: redgifEmbed\n            },\n            onClick: e => e.stopPropagation()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 13\n          }, this);\n        } else {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"media-error\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Embedded content\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n              href: mediaInfo.url,\n              target: \"_blank\",\n              rel: \"noopener noreferrer\",\n              className: \"original-link\",\n              children: [\"Open \", mediaInfo.provider, \" content\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 176,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 13\n          }, this);\n        }\n      case 'link':\n      default:\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"media-link\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"This content cannot be displayed directly\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n            href: mediaInfo.url,\n            target: \"_blank\",\n            rel: \"noopener noreferrer\",\n            className: \"original-link\",\n            children: \"Open original content\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 13\n          }, this), post.thumbnail && post.thumbnail !== 'default' && post.thumbnail !== 'self' && /*#__PURE__*/_jsxDEV(\"img\", {\n            src: post.thumbnail,\n            alt: \"Thumbnail\",\n            className: \"content-thumbnail\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 11\n        }, this);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"media-item\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"media-content\",\n      onClick: toggleInfo,\n      children: [!loaded && !error && mediaInfo.type !== 'embed' && mediaInfo.type !== 'link' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"media-loading\",\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 11\n      }, this), renderMedia()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }, this), showInfo && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"media-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"post-title\",\n        children: post.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post-details\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"subreddit\",\n          children: [\"r/\", post.subreddit]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"author\",\n          children: [\"Posted by u/\", post.author]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        href: `https://reddit.com${post.permalink}`,\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        className: \"view-post-button\",\n        children: \"View on Reddit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 204,\n    columnNumber: 5\n  }, this);\n}\n_s(MediaItem, \"PNeiajDc83aH6GfzwhRhhNCv3NI=\");\n_c = MediaItem;\nexport default MediaItem;\nvar _c;\n$RefreshReg$(_c, \"MediaItem\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","MediaItem","post","_s","loaded","setLoaded","error","setError","showInfo","setShowInfo","redgifEmbed","setRedgifEmbed","getMediaUrl","url","match","type","is_video","media","reddit_video","fallback_url","includes","domain","preview","reddit_video_preview","oembed","provider","embedCode","html","redgifId","split","id","gfycatId","pop","post_hint","images","source","replace","thumbnail","mediaInfo","embedHtml","handleLoad","handleError","toggleInfo","renderMedia","className","children","fileName","_jsxFileName","lineNumber","columnNumber","href","target","rel","src","alt","title","onLoad","onError","controls","loop","muted","onLoadedData","onClick","e","stopPropagation","dangerouslySetInnerHTML","__html","subreddit","author","permalink","_c","$RefreshReg$"],"sources":["/Users/zachary/Desktop/reddit-saved-gallery/src/components/MediaItem.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './MediaItem.css';\n\nfunction MediaItem({ post }) {\n  const [loaded, setLoaded] = useState(false);\n  const [error, setError] = useState(false);\n  const [showInfo, setShowInfo] = useState(true);\n  const [redgifEmbed, setRedgifEmbed] = useState(null);\n  \n  // Get media URL based on post type\n  const getMediaUrl = (post) => {\n    // Handle direct image links\n    if (post.url.match(/\\.(jpg|jpeg|png|gif)$/i)) {\n      return { type: 'image', url: post.url };\n    }\n    \n    // Handle Reddit videos\n    if (post.is_video && post.media && post.media.reddit_video) {\n      return { type: 'video', url: post.media.reddit_video.fallback_url };\n    }\n    \n    // Handle redgifs - various patterns\n    if (post.url.includes('redgifs.com') || \n        post.domain === 'redgifs.com' || \n        (post.preview && post.preview.reddit_video_preview)) {\n      \n      // First check for embedded redgif data in the post\n      if (post.media && post.media.oembed) {\n        return { \n          type: 'embed', \n          provider: 'redgif',\n          embedCode: post.media.oembed.html,\n          url: post.url\n        };\n      }\n      \n      // Check for redgif URL patterns\n      let redgifId = null;\n      \n      // Pattern: redgifs.com/watch/[id]\n      if (post.url.includes('/watch/')) {\n        redgifId = post.url.split('/watch/')[1].split(/[?#]/)[0];\n      } \n      // Pattern: redgifs.com/[id]\n      else if (post.url.match(/redgifs\\.com\\/\\w+/)) {\n        redgifId = post.url.split('redgifs.com/')[1].split(/[?#]/)[0];\n      }\n      \n      if (redgifId) {\n        return { \n          type: 'embed', \n          provider: 'redgif',\n          id: redgifId,\n          url: `https://redgifs.com/watch/${redgifId}`\n        };\n      }\n      \n      // Fallback: return the URL for direct opening\n      return { type: 'link', provider: 'redgif', url: post.url };\n    }\n    \n    // Handle imgur links without extension\n    if (post.url.includes('imgur.com') && !post.url.match(/\\.(jpg|jpeg|png|gif)$/i)) {\n      return { type: 'image', url: `${post.url}.jpg` };\n    }\n    \n    // Handle gfycat links\n    if (post.url.includes('gfycat.com')) {\n      const gfycatId = post.url.split('/').pop().split('-')[0];\n      // First try the mp4 version\n      return { type: 'video', url: `https://giant.gfycat.com/${gfycatId}.mp4` };\n    }\n    \n    // If we can detect it's an image post\n    if (post.post_hint === 'image' || post.url.includes('i.redd.it')) {\n      return { type: 'image', url: post.url };\n    }\n    \n    // Default case - check if preview available\n    if (post.preview && post.preview.images && post.preview.images[0]) {\n      const preview = post.preview.images[0];\n      if (preview.source) {\n        return { type: 'image', url: preview.source.url.replace(/&amp;/g, '&') };\n      }\n    }\n    \n    // Last resort - use thumbnail\n    if (post.thumbnail && post.thumbnail !== 'default' && post.thumbnail !== 'self') {\n      return { type: 'image', url: post.thumbnail };\n    }\n    \n    // Nothing worked, return link\n    return { type: 'link', url: post.url };\n  };\n  \n  // Process the media information\n  const mediaInfo = getMediaUrl(post);\n  \n  // For redgif embeds, we'll use an iframe\n  useEffect(() => {\n    if (mediaInfo.type === 'embed' && mediaInfo.provider === 'redgif') {\n      if (mediaInfo.embedCode) {\n        // Directly use provided embed code if available\n        setRedgifEmbed(mediaInfo.embedCode);\n      } else if (mediaInfo.id) {\n        // Create embed code for redgif ID\n        const embedHtml = `<iframe src=\"https://redgifs.com/ifr/${mediaInfo.id}\" \n                                   frameborder=\"0\" scrolling=\"no\" \n                                   width=\"100%\" height=\"100%\" \n                                   allowfullscreen></iframe>`;\n        setRedgifEmbed(embedHtml);\n      }\n    }\n  }, [mediaInfo]);\n  \n  const handleLoad = () => setLoaded(true);\n  const handleError = () => setError(true);\n  \n  // Toggle info panel when clicking on media\n  const toggleInfo = () => {\n    setShowInfo(!showInfo);\n  };\n\n  // Render different content based on media type\n  const renderMedia = () => {\n    if (error) {\n      return (\n        <div className=\"media-error\">\n          <p>Failed to load media</p>\n          <a href={mediaInfo.url} target=\"_blank\" rel=\"noopener noreferrer\" className=\"original-link\">\n            Open original\n          </a>\n        </div>\n      );\n    }\n    \n    switch (mediaInfo.type) {\n      case 'image':\n        return (\n          <img \n            src={mediaInfo.url}\n            alt={post.title}\n            onLoad={handleLoad}\n            onError={handleError}\n            className=\"centered-media\"\n          />\n        );\n      \n      case 'video':\n        return (\n          <video \n            controls\n            loop\n            muted\n            onLoadedData={handleLoad}\n            onError={handleError}\n            src={mediaInfo.url}\n            className=\"centered-media\"\n            onClick={(e) => e.stopPropagation()} // Prevent video controls from toggling info\n          />\n        );\n      \n      case 'embed':\n        if (mediaInfo.provider === 'redgif' && redgifEmbed) {\n          return (\n            <div \n              className=\"redgif-embed-container\"\n              dangerouslySetInnerHTML={{ __html: redgifEmbed }}\n              onClick={(e) => e.stopPropagation()}\n            />\n          );\n        } else {\n          return (\n            <div className=\"media-error\">\n              <p>Embedded content</p>\n              <a href={mediaInfo.url} target=\"_blank\" rel=\"noopener noreferrer\" className=\"original-link\">\n                Open {mediaInfo.provider} content\n              </a>\n            </div>\n          );\n        }\n      \n      case 'link':\n      default:\n        return (\n          <div className=\"media-link\">\n            <p>This content cannot be displayed directly</p>\n            <a href={mediaInfo.url} target=\"_blank\" rel=\"noopener noreferrer\" className=\"original-link\">\n              Open original content\n            </a>\n            {post.thumbnail && post.thumbnail !== 'default' && post.thumbnail !== 'self' && (\n              <img \n                src={post.thumbnail}\n                alt=\"Thumbnail\"\n                className=\"content-thumbnail\"\n              />\n            )}\n          </div>\n        );\n    }\n  };\n\n  return (\n    <div className=\"media-item\">\n      <div className=\"media-content\" onClick={toggleInfo}>\n        {!loaded && !error && mediaInfo.type !== 'embed' && mediaInfo.type !== 'link' && (\n          <div className=\"media-loading\">Loading...</div>\n        )}\n        \n        {renderMedia()}\n      </div>\n      \n      {showInfo && (\n        <div className=\"media-info\">\n          <h3 className=\"post-title\">{post.title}</h3>\n          <div className=\"post-details\">\n            <span className=\"subreddit\">r/{post.subreddit}</span>\n            <span className=\"author\">Posted by u/{post.author}</span>\n          </div>\n          <a \n            href={`https://reddit.com${post.permalink}`}\n            target=\"_blank\" \n            rel=\"noopener noreferrer\"\n            className=\"view-post-button\"\n          >\n            View on Reddit\n          </a>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default MediaItem;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}