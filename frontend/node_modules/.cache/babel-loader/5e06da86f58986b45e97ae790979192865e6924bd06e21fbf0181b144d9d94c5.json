{"ast":null,"code":"var _jsxFileName = \"/Users/zachary/Desktop/reddit-saved-gallery/src/components/AuthCallback.js\",\n  _s = $RefreshSig$();\n// src/components/AuthCallback.js\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport axios from 'axios';\nimport LoadingSpinner from './LoadingSpinner';\n\n// Reddit API credentials\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CLIENT_ID = 'YOUR_CLIENT_ID';\nconst CLIENT_SECRET = ''; // Leave empty for installed/web apps\nconst REDIRECT_URI = 'http://localhost:3000/auth-callback';\nfunction AuthCallback({\n  setToken\n}) {\n  _s();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const [error, setError] = useState(null);\n  const [debug, setDebug] = useState({});\n\n  // Helper function to test localStorage\n  const testLocalStorage = () => {\n    try {\n      // Test if localStorage is accessible\n      localStorage.setItem('test_storage', 'test');\n      const testValue = localStorage.getItem('test_storage');\n      localStorage.removeItem('test_storage');\n      return {\n        working: testValue === 'test',\n        error: null\n      };\n    } catch (e) {\n      return {\n        working: false,\n        error: e.message\n      };\n    }\n  };\n  useEffect(() => {\n    const processCallback = async () => {\n      // Update debug info\n      const debugInfo = {\n        url: location.search,\n        localStorage: testLocalStorage(),\n        stage: 'starting'\n      };\n      setDebug(debugInfo);\n      console.log(\"Debug info:\", debugInfo);\n      const urlParams = new URLSearchParams(location.search);\n      const code = urlParams.get('code');\n      const errorParam = urlParams.get('error');\n\n      // Check for error param from Reddit\n      if (errorParam) {\n        setError(`Reddit authorization error: ${errorParam}`);\n        debugInfo.stage = 'reddit_error';\n        debugInfo.redditError = errorParam;\n        setDebug({\n          ...debugInfo\n        });\n        return;\n      }\n      if (!code) {\n        setError(\"No authorization code received from Reddit\");\n        debugInfo.stage = 'no_code';\n        setDebug({\n          ...debugInfo\n        });\n        return;\n      }\n      try {\n        debugInfo.stage = 'token_exchange';\n        setDebug({\n          ...debugInfo\n        });\n        console.log(\"Exchanging code for token...\", code);\n\n        // Create form data for the token request\n        const formData = new URLSearchParams();\n        formData.append('grant_type', 'authorization_code');\n        formData.append('code', code);\n        formData.append('redirect_uri', REDIRECT_URI);\n\n        // Request the access token\n        const response = await axios.post('/api/v1/access_token',\n        // Note the relative URL\n        formData.toString(), {\n          headers: {\n            'Content-Type': 'application/x-www-form-urlencoded',\n            'User-Agent': 'web:reddit-saved-gallery:v1.0'\n          },\n          auth: {\n            username: CLIENT_ID,\n            password: CLIENT_SECRET\n          }\n        });\n        debugInfo.stage = 'received_response';\n        debugInfo.responseStatus = response.status;\n        // Don't log the full token for security\n        debugInfo.hasAccessToken = !!response.data.access_token;\n        debugInfo.hasRefreshToken = !!response.data.refresh_token;\n        debugInfo.tokenType = response.data.token_type;\n        setDebug({\n          ...debugInfo\n        });\n        console.log(\"Token response status:\", response.status);\n        if (response.data.error) {\n          throw new Error(`Reddit API error: ${response.data.error}`);\n        }\n\n        // Store the tokens\n        const accessToken = response.data.access_token;\n        debugInfo.stage = 'storing_token';\n        setDebug({\n          ...debugInfo\n        });\n        try {\n          console.log(\"Attempting to store token in localStorage...\");\n          localStorage.setItem('reddit_token', accessToken);\n\n          // Verify it was stored correctly\n          const storedToken = localStorage.getItem('reddit_token');\n          debugInfo.tokenStored = !!storedToken;\n          debugInfo.tokenMatches = storedToken === accessToken;\n          setDebug({\n            ...debugInfo\n          });\n          if (response.data.refresh_token) {\n            localStorage.setItem('reddit_refresh_token', response.data.refresh_token);\n          }\n          console.log(\"Token stored successfully:\", !!storedToken);\n        } catch (storageError) {\n          console.error(\"localStorage error:\", storageError);\n          debugInfo.storageError = storageError.message;\n          setDebug({\n            ...debugInfo\n          });\n          // Continue even if localStorage fails - we'll use the state\n        }\n\n        // Update state and redirect to gallery\n        debugInfo.stage = 'updating_state';\n        setDebug({\n          ...debugInfo\n        });\n        console.log(\"Setting token in app state...\");\n        setToken(accessToken);\n        debugInfo.stage = 'redirecting';\n        setDebug({\n          ...debugInfo\n        });\n        console.log(\"Redirecting to gallery...\");\n\n        // Slight delay to ensure state is updated\n        setTimeout(() => {\n          navigate('/gallery');\n        }, 500);\n      } catch (error) {\n        var _error$response, _error$response2, _error$response2$data;\n        console.error('Error exchanging code for token:', error);\n        debugInfo.stage = 'error';\n        debugInfo.errorMessage = error.message;\n        debugInfo.responseData = (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data;\n        setDebug({\n          ...debugInfo\n        });\n        setError(`Authentication failed: ${((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.error) || error.message}`);\n      }\n    };\n    processCallback();\n  }, [location, navigate, setToken]);\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"auth-error-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Authentication Error\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-message\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"debug-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Debug Information\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n          children: JSON.stringify(debug, null, 2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => navigate('/'),\n        children: \"Return to Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"auth-callback-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Authenticating with Reddit...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Please wait while we complete the authentication process.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"debug-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Debug Status: \", debug.stage]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: JSON.stringify(debug, null, 2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 182,\n    columnNumber: 5\n  }, this);\n}\n_s(AuthCallback, \"BQSW2J5541S2nFkNsLsISAHWM4s=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = AuthCallback;\nexport default AuthCallback;\nvar _c;\n$RefreshReg$(_c, \"AuthCallback\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","useLocation","axios","LoadingSpinner","jsxDEV","_jsxDEV","CLIENT_ID","CLIENT_SECRET","REDIRECT_URI","AuthCallback","setToken","_s","navigate","location","error","setError","debug","setDebug","testLocalStorage","localStorage","setItem","testValue","getItem","removeItem","working","e","message","processCallback","debugInfo","url","search","stage","console","log","urlParams","URLSearchParams","code","get","errorParam","redditError","formData","append","response","post","toString","headers","auth","username","password","responseStatus","status","hasAccessToken","data","access_token","hasRefreshToken","refresh_token","tokenType","token_type","Error","accessToken","storedToken","tokenStored","tokenMatches","storageError","setTimeout","_error$response","_error$response2","_error$response2$data","errorMessage","responseData","className","children","fileName","_jsxFileName","lineNumber","columnNumber","JSON","stringify","onClick","_c","$RefreshReg$"],"sources":["/Users/zachary/Desktop/reddit-saved-gallery/src/components/AuthCallback.js"],"sourcesContent":["// src/components/AuthCallback.js\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport axios from 'axios';\nimport LoadingSpinner from './LoadingSpinner';\n\n// Reddit API credentials\nconst CLIENT_ID = 'YOUR_CLIENT_ID';\nconst CLIENT_SECRET = ''; // Leave empty for installed/web apps\nconst REDIRECT_URI = 'http://localhost:3000/auth-callback';\n\nfunction AuthCallback({ setToken }) {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const [error, setError] = useState(null);\n  const [debug, setDebug] = useState({});\n\n  // Helper function to test localStorage\n  const testLocalStorage = () => {\n    try {\n      // Test if localStorage is accessible\n      localStorage.setItem('test_storage', 'test');\n      const testValue = localStorage.getItem('test_storage');\n      localStorage.removeItem('test_storage');\n      \n      return {\n        working: testValue === 'test',\n        error: null\n      };\n    } catch (e) {\n      return {\n        working: false,\n        error: e.message\n      };\n    }\n  };\n\n  useEffect(() => {\n    const processCallback = async () => {\n      // Update debug info\n      const debugInfo = {\n        url: location.search,\n        localStorage: testLocalStorage(),\n        stage: 'starting'\n      };\n      setDebug(debugInfo);\n      console.log(\"Debug info:\", debugInfo);\n      \n      const urlParams = new URLSearchParams(location.search);\n      const code = urlParams.get('code');\n      const errorParam = urlParams.get('error');\n      \n      // Check for error param from Reddit\n      if (errorParam) {\n        setError(`Reddit authorization error: ${errorParam}`);\n        debugInfo.stage = 'reddit_error';\n        debugInfo.redditError = errorParam;\n        setDebug({...debugInfo});\n        return;\n      }\n      \n      if (!code) {\n        setError(\"No authorization code received from Reddit\");\n        debugInfo.stage = 'no_code';\n        setDebug({...debugInfo});\n        return;\n      }\n      \n      try {\n        debugInfo.stage = 'token_exchange';\n        setDebug({...debugInfo});\n        console.log(\"Exchanging code for token...\", code);\n        \n        // Create form data for the token request\n        const formData = new URLSearchParams();\n        formData.append('grant_type', 'authorization_code');\n        formData.append('code', code);\n        formData.append('redirect_uri', REDIRECT_URI);\n\n        // Request the access token\n        const response = await axios.post(\n          '/api/v1/access_token',  // Note the relative URL\n          formData.toString(),\n          {\n            headers: {\n              'Content-Type': 'application/x-www-form-urlencoded',\n              'User-Agent': 'web:reddit-saved-gallery:v1.0',\n            },\n            auth: {\n              username: CLIENT_ID,\n              password: CLIENT_SECRET,\n            },\n          }\n        );\n\n        debugInfo.stage = 'received_response';\n        debugInfo.responseStatus = response.status;\n        // Don't log the full token for security\n        debugInfo.hasAccessToken = !!response.data.access_token;\n        debugInfo.hasRefreshToken = !!response.data.refresh_token;\n        debugInfo.tokenType = response.data.token_type;\n        setDebug({...debugInfo});\n        \n        console.log(\"Token response status:\", response.status);\n        \n        if (response.data.error) {\n          throw new Error(`Reddit API error: ${response.data.error}`);\n        }\n\n        // Store the tokens\n        const accessToken = response.data.access_token;\n        debugInfo.stage = 'storing_token';\n        setDebug({...debugInfo});\n        \n        try {\n          console.log(\"Attempting to store token in localStorage...\");\n          localStorage.setItem('reddit_token', accessToken);\n          \n          // Verify it was stored correctly\n          const storedToken = localStorage.getItem('reddit_token');\n          debugInfo.tokenStored = !!storedToken;\n          debugInfo.tokenMatches = storedToken === accessToken;\n          setDebug({...debugInfo});\n          \n          if (response.data.refresh_token) {\n            localStorage.setItem('reddit_refresh_token', response.data.refresh_token);\n          }\n          \n          console.log(\"Token stored successfully:\", !!storedToken);\n        } catch (storageError) {\n          console.error(\"localStorage error:\", storageError);\n          debugInfo.storageError = storageError.message;\n          setDebug({...debugInfo});\n          // Continue even if localStorage fails - we'll use the state\n        }\n        \n        // Update state and redirect to gallery\n        debugInfo.stage = 'updating_state';\n        setDebug({...debugInfo});\n        \n        console.log(\"Setting token in app state...\");\n        setToken(accessToken);\n        \n        debugInfo.stage = 'redirecting';\n        setDebug({...debugInfo});\n        console.log(\"Redirecting to gallery...\");\n        \n        // Slight delay to ensure state is updated\n        setTimeout(() => {\n          navigate('/gallery');\n        }, 500);\n        \n      } catch (error) {\n        console.error('Error exchanging code for token:', error);\n        debugInfo.stage = 'error';\n        debugInfo.errorMessage = error.message;\n        debugInfo.responseData = error.response?.data;\n        setDebug({...debugInfo});\n        \n        setError(`Authentication failed: ${error.response?.data?.error || error.message}`);\n      }\n    };\n\n    processCallback();\n  }, [location, navigate, setToken]);\n\n  if (error) {\n    return (\n      <div className=\"auth-error-container\">\n        <h2>Authentication Error</h2>\n        <div className=\"error-message\">{error}</div>\n        <div className=\"debug-section\">\n          <h3>Debug Information</h3>\n          <pre>{JSON.stringify(debug, null, 2)}</pre>\n        </div>\n        <button onClick={() => navigate('/')}>Return to Login</button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"auth-callback-container\">\n      <h2>Authenticating with Reddit...</h2>\n      <LoadingSpinner />\n      <p>Please wait while we complete the authentication process.</p>\n      <div className=\"debug-section\">\n        <h3>Debug Status: {debug.stage}</h3>\n        <pre>{JSON.stringify(debug, null, 2)}</pre>\n      </div>\n    </div>\n  );\n}\n\nexport default AuthCallback;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}