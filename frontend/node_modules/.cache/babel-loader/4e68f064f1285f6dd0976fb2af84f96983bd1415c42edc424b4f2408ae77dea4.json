{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _events = require(\"events\");\nvar _helpers = require(\"../helpers.js\");\nvar _RedditContent = _interopRequireDefault(require(\"./RedditContent.js\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar WebSocket = _helpers.isBrowser ? global.WebSocket : require('ws');\nvar api_type = 'json';\n/**\n* A class representing a live reddit thread\n* <style> #LiveThread {display: none} </style>\n* @example\n*\n* // Get a livethread with the given ID\n* r.getLivethread('whrdxo8dg9n0')\n* @desc For the most part, reddit distributes the content of live threads via websocket, rather than through the REST API.\nAs such, snoowrap assigns each fetched LiveThread object a `stream` property, which takes the form of an\n[EventEmitter](https://nodejs.org/api/events.html#events_class_eventemitter). To listen for new thread updates, simply\nadd listeners to that emitter.\n\nThe following events can be emitted:\n- `update`: Occurs when a new update has been posted in this thread. Emits a `LiveUpdate` object containing information\nabout the new update.\n- `activity`: Occurs periodically when the viewer count for this thread changes.\n- `settings`: Occurs when the thread's settings change. Emits an object containing the new settings.\n- `delete`: Occurs when an update has been deleted. Emits the ID of the deleted update.\n- `strike`: Occurs when an update has been striken (marked incorrect and crossed out). Emits the ID of the striken update.\n- `embeds_ready`: Occurs when embedded media is now available for a previously-posted update.\n- `complete`: Occurs when this LiveThread has been marked as complete, and no more updates will be sent.\n\n(Note: These event types are mapped directly from reddit's categorization of the updates. The descriptions above are\nparaphrased from reddit's descriptions [here](https://www.reddit.com/dev/api#section_live).)\n\nAs an example, this would log all new livethread updates to the console:\n\n```javascript\nsomeLivethread.stream.on('update', data => {\n  console.log(data.body);\n});\n```\n\n* @extends RedditContent\n*/\n\nvar LiveThread = class LiveThread extends _RedditContent.default {\n  constructor(options, _r, _hasFetched) {\n    var _this;\n    super(options, _r, _hasFetched);\n    _this = this;\n    this._rawStream = null;\n    this._populatedStream = null;\n    if (_hasFetched) {\n      Object.defineProperty(this, 'stream', {\n        get: function () {\n          if (!_this._populatedStream && _this.websocket_url) {\n            _this._setupWebSocket();\n          }\n          return _this._populatedStream;\n        }\n      });\n    }\n  }\n  get _uri() {\n    return \"live/\".concat(this.id, \"/about\");\n  }\n  _setupWebSocket() {\n    var _this2 = this;\n    this._rawStream = new WebSocket(this.websocket_url);\n    this._populatedStream = new _events.EventEmitter();\n    var handler = function (data) {\n      var parsed = _this2._r._populate(JSON.parse(data));\n      _this2._populatedStream.emit(parsed.type, parsed.payload);\n    };\n    if (typeof this._rawStream.on === 'function') {\n      this._rawStream.on('message', handler);\n    } else {\n      this._rawStream.onmessage = function (messageEvent) {\n        return handler(messageEvent.data);\n      };\n    }\n  }\n  /**\n  * @summary Adds a new update to this thread.\n  * @param {string} body The body of the new update\n  * @returns {Promise} A Promise that fulfills with this LiveThread when the request is complete\n  * @example r.getLivethread('whrdxo8dg9n0').addUpdate('Breaking: Someone is reading the snoowrap documentation \\\\o/')\n  */\n\n  addUpdate(body) {\n    return this._post({\n      uri: \"api/live/\".concat(this.id, \"/update\"),\n      form: {\n        api_type,\n        body\n      }\n    }).then((0, _helpers.handleJsonErrors)(this));\n  }\n  /**\n  * @summary Strikes (marks incorrect and crosses out) the given update.\n  * @param {object} options\n  * @param {string} options.id The ID of the update that should be striked.\n  * @returns {Promise} A Promise that fulfills with this LiveThread when the request is complete\n  * @example r.getLivethread('whrdxo8dg9n0').strikeUpdate({id: 'LiveUpdate_edc34446-faf0-11e5-a1b4-0e858bca33cd'})\n  */\n\n  strikeUpdate(_ref) {\n    var id = _ref.id;\n    return this._post({\n      uri: \"api/live/\".concat(this.id, \"/strike_update\"),\n      form: {\n        api_type,\n        id: \"\".concat(id.startsWith('LiveUpdate_') ? '' : 'LiveUpdate_').concat(id)\n      }\n    }).then((0, _helpers.handleJsonErrors)(this));\n  }\n  /**\n  * @summary Deletes an update from this LiveThread.\n  * @param {object} options\n  * @param {string} options.id The ID of the LiveUpdate that should be deleted\n  * @returns {Promise} A Promise that fulfills with this LiveThread when the request is complete\n  * @example r.getLivethread('whrdxo8dg9n0').deleteUpdate({id: 'LiveUpdate_edc34446-faf0-11e5-a1b4-0e858bca33cd'})\n  */\n\n  deleteUpdate(_ref2) {\n    var id = _ref2.id;\n    return this._post({\n      uri: \"api/live/\".concat(this.id, \"/delete_update\"),\n      form: {\n        api_type,\n        id: \"\".concat(id.startsWith('LiveUpdate_') ? '' : 'LiveUpdate_').concat(id)\n      }\n    }).then((0, _helpers.handleJsonErrors)(this));\n  }\n  /**\n  * @summary Gets a list of this LiveThread's contributors\n  * @returns {Promise} An Array containing RedditUsers\n  * @example\n  *\n  * r.getLivethread('whrdxo8dg9n0').getContributors().then(console.log)\n  * // => [\n  * //  RedditUser { permissions: ['edit'], name: 'not_an_aardvark', id: 't2_k83md' },\n  * //  RedditUser { permissions: ['all'], id: 't2_u3l80', name: 'snoowrap_testing' }\n  * // ]\n  */\n\n  getContributors() {\n    return this._get({\n      uri: \"live/\".concat(this.id, \"/contributors\")\n    }).then(function (contributors) {\n      return Array.isArray(contributors[0]) ? contributors[0] : contributors;\n    });\n  }\n  /**\n  * @summary Invites a contributor to this LiveThread.\n  * @param {object} options\n  * @param {string} options.name The name of the user who should be invited\n  * @param {Array} options.permissions The permissions that the invited user should receive. This should be an Array containing\n  some combination of `'update', 'edit', 'manage'`. To invite a contributor with full permissions, omit this property.\n  * @returns {Promise} A Promise that fulfills with this LiveThread when the request is complete\n  * @example r.getLivethread('whrdxo8dg9n0').inviteContributor({name: 'actually_an_aardvark', permissions: ['update']})\n  */\n\n  inviteContributor(_ref3) {\n    var name = _ref3.name,\n      permissions = _ref3.permissions;\n    return this._post({\n      uri: \"api/live/\".concat(this.id, \"/invite_contributor\"),\n      form: {\n        api_type,\n        name,\n        permissions: (0, _helpers.formatLivethreadPermissions)(permissions),\n        type: 'liveupdate_contributor_invite'\n      }\n    }).then((0, _helpers.handleJsonErrors)(this));\n  }\n  /**\n  * @summary Revokes an invitation for the given user to become a contributor on this LiveThread.\n  * @param {object} options\n  * @param {string} options.name The username of the account whose invitation should be revoked\n  * @returns {Promise} A Promise that fulfills with this LiveThread when the request is complete\n  * @example r.getLivethread('whrdxo8dg9n0').revokeContributorInvite({name: 'actually_an_aardvark'});\n  */\n\n  revokeContributorInvite(_ref4) {\n    var _this3 = this;\n    var name = _ref4.name;\n    return this._r.getUser(name).fetch().get('id').then(function (userId) {\n      return _this3._post({\n        uri: \"api/live/\".concat(_this3.id, \"/rm_contributor_invite\"),\n        form: {\n          api_type,\n          id: \"t2_\".concat(userId)\n        }\n      });\n    }).then((0, _helpers.handleJsonErrors)(this));\n  }\n  /**\n  * @summary Accepts a pending contributor invitation on this LiveThread.\n  * @returns {Promise} A Promise that fulfills with this LiveThread when the request is complete\n  * @example r.getLivethread('whrdxo8dg9n0').acceptContributorInvite()\n  */\n\n  acceptContributorInvite() {\n    return this._post({\n      uri: \"api/live/\".concat(this.id, \"/accept_contributor_invite\"),\n      form: {\n        api_type\n      }\n    }).return(this);\n  }\n  /**\n  * @summary Abdicates contributor status on this LiveThread.\n  * @returns {Promise} A Promise that fulfills with this LiveThread when the request is complete\n  * @example r.getLivethread('whrdxo8dg9n0').leaveContributor()\n  */\n\n  leaveContributor() {\n    return this._post({\n      uri: \"api/live/\".concat(this.id, \"/leave_contributor\"),\n      form: {\n        api_type\n      }\n    }).return(this);\n  }\n  /**\n  * @summary Removes the given user from contributor status on this LiveThread.\n  * @param {object} options\n  * @param {string} options.name The username of the account who should be removed\n  * @returns {Promise} A Promise that fulfills with this LiveThread when the request is complete\n  * @example r.getLivethread('whrdxo8dg9n0').removeContributor({name: 'actually_an_aardvark'})\n  */\n\n  removeContributor(_ref5) {\n    var _this4 = this;\n    var name = _ref5.name;\n    return this._r.getUser(name).fetch().get('id').then(function (userId) {\n      return _this4._post({\n        uri: \"api/live/\".concat(_this4.id, \"/rm_contributor\"),\n        form: {\n          api_type,\n          id: \"t2_\".concat(userId)\n        }\n      });\n    }).then((0, _helpers.handleJsonErrors)(this));\n  }\n  /**\n  * @summary Sets the permissions of the given contributor.\n  * @param {object} options\n  * @param {string} options.name The name of the user whose permissions should be changed\n  * @param {Array} options.permissions The updated permissions that the user should have. This should be an Array containing\n  some combination of `'update', 'edit', 'manage'`. To give the contributor with full permissions, omit this property.\n  * @returns {Promise} A Promise that fulfills with this LiveThread when the request is complete\n  * @example r.getLivethread('whrdxo8dg9n0').setContributorPermissions({name: 'actually_an_aardvark', permissions: ['edit']})\n  */\n\n  setContributorPermissions(_ref6) {\n    var name = _ref6.name,\n      permissions = _ref6.permissions;\n    return this._post({\n      uri: \"api/live/\".concat(this.id, \"/set_contributor_permissions\"),\n      form: {\n        api_type,\n        name,\n        permissions: (0, _helpers.formatLivethreadPermissions)(permissions),\n        type: 'liveupdate_contributor'\n      }\n    }).then((0, _helpers.handleJsonErrors)(this));\n  }\n  /**\n  * @summary Edits the settings on this LiveThread.\n  * @param {object} options\n  * @param {string} options.title The title of the thread\n  * @param {string} [options.description] A descriptions of the thread. 120 characters max\n  * @param {string} [options.resources] Information and useful links related to the thread.\n  * @param {boolean} options.nsfw Determines whether the thread is Not Safe For Work\n  * @returns {Promise} A Promise that fulfills with this LiveThread when the request is complete\n  * @example r.getLivethread('whrdxo8dg9n0').editSettings({title: 'My livethread', description: 'an updated description'})\n  */\n\n  editSettings(_ref7) {\n    var title = _ref7.title,\n      description = _ref7.description,\n      resources = _ref7.resources,\n      nsfw = _ref7.nsfw;\n    return this._post({\n      uri: \"api/live/\".concat(this.id, \"/edit\"),\n      form: {\n        api_type,\n        description,\n        nsfw,\n        resources,\n        title\n      }\n    }).then((0, _helpers.handleJsonErrors)(this));\n  }\n  /**\n  * @summary Permanently closes this thread, preventing any more updates from being added.\n  * @returns {Promise} A Promise that fulfills with this LiveThread when the request is complete\n  * @example r.getLivethread('whrdxo8dg9n0').closeThread()\n  */\n\n  closeThread() {\n    return this._post({\n      uri: \"api/live/\".concat(this.id, \"/close_thread\"),\n      form: {\n        api_type\n      }\n    }).return(this);\n  }\n  /**\n  * @summary Reports this LiveThread for breaking reddit's rules.\n  * @param {object} options\n  * @param {string} options.reason The reason for the report. One of `spam`, `vote-manipulation`, `personal-information`,\n  `sexualizing-minors`, `site-breaking`\n  * @returns {Promise} A Promise that fulfills with this LiveThread when the request is complete\n  * @example r.getLivethread('whrdxo8dg9n0').report({reason: 'Breaking a rule blah blah blah'})\n  */\n\n  report(_ref8) {\n    var reason = _ref8.reason;\n    return this._post({\n      uri: \"api/live/\".concat(this.id, \"/report\"),\n      form: {\n        api_type,\n        type: reason\n      }\n    }).then((0, _helpers.handleJsonErrors)(this));\n  }\n  /**\n  * @summary Gets a Listing containing past updates to this LiveThread.\n  * @param {object} [options] Options for the resulting Listing\n  * @returns {Promise} A Listing containing LiveUpdates\n  * @example\n  *\n  * r.getLivethread('whrdxo8dg9n0').getRecentUpdates().then(console.log)\n  * // => Listing [\n  * //  LiveUpdate { ... },\n  * //  LiveUpdate { ... },\n  * //  ...\n  * // ]\n  */\n\n  getRecentUpdates(options) {\n    return this._getListing({\n      uri: \"live/\".concat(this.id),\n      qs: options\n    });\n  }\n  /**\n  * @summary Gets a list of reddit submissions linking to this LiveThread.\n  * @param {object} [options] Options for the resulting Listing\n  * @returns {Promise} A Listing containing Submissions\n  * @example\n  *\n  * r.getLivethread('whrdxo8dg9n0').getDiscussions().then(console.log)\n  * // => Listing [\n  * //  Submission { ... },\n  * //  Submission { ... },\n  * //  ...\n  * // ]\n  */\n\n  getDiscussions(options) {\n    return this._getListing({\n      uri: \"live/\".concat(this.id, \"/discussions\"),\n      qs: options\n    });\n  }\n  /**\n  * @summary Stops listening for new updates on this LiveThread.\n  * @desc To avoid memory leaks that can result from open sockets, it's recommended that you call this method when you're\n  finished listening for updates on this LiveThread.\n  *\n  * This should not be confused with {@link LiveThread#closeThread}, which marks the thread as \"closed\" on reddit.\n  * @returns undefined\n  * @example\n  *\n  * var myThread = r.getLivethread('whrdxo8dg9n0');\n  * myThread.stream.on('update', content => {\n  *   console.log(content);\n  *   myThread.closeStream();\n  * })\n  *\n  */\n\n  closeStream() {\n    if (this._rawStream) {\n      this._rawStream.close();\n    }\n  }\n};\nvar _default = LiveThread;\nexports.default = _default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","_events","require","_helpers","_RedditContent","_interopRequireDefault","obj","__esModule","WebSocket","isBrowser","global","api_type","LiveThread","constructor","options","_r","_hasFetched","_this","_rawStream","_populatedStream","get","websocket_url","_setupWebSocket","_uri","concat","id","_this2","EventEmitter","handler","data","parsed","_populate","JSON","parse","emit","type","payload","on","onmessage","messageEvent","addUpdate","body","_post","uri","form","then","handleJsonErrors","strikeUpdate","_ref","startsWith","deleteUpdate","_ref2","getContributors","_get","contributors","Array","isArray","inviteContributor","_ref3","name","permissions","formatLivethreadPermissions","revokeContributorInvite","_ref4","_this3","getUser","fetch","userId","acceptContributorInvite","return","leaveContributor","removeContributor","_ref5","_this4","setContributorPermissions","_ref6","editSettings","_ref7","title","description","resources","nsfw","closeThread","report","_ref8","reason","getRecentUpdates","_getListing","qs","getDiscussions","closeStream","close","_default"],"sources":["/Users/zachary/Desktop/reddit-saved-gallery/node_modules/snoowrap/dist/objects/LiveThread.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _events = require(\"events\");\n\nvar _helpers = require(\"../helpers.js\");\n\nvar _RedditContent = _interopRequireDefault(require(\"./RedditContent.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar WebSocket = _helpers.isBrowser ? global.WebSocket : require('ws');\nvar api_type = 'json';\n/**\n* A class representing a live reddit thread\n* <style> #LiveThread {display: none} </style>\n* @example\n*\n* // Get a livethread with the given ID\n* r.getLivethread('whrdxo8dg9n0')\n* @desc For the most part, reddit distributes the content of live threads via websocket, rather than through the REST API.\nAs such, snoowrap assigns each fetched LiveThread object a `stream` property, which takes the form of an\n[EventEmitter](https://nodejs.org/api/events.html#events_class_eventemitter). To listen for new thread updates, simply\nadd listeners to that emitter.\n\nThe following events can be emitted:\n- `update`: Occurs when a new update has been posted in this thread. Emits a `LiveUpdate` object containing information\nabout the new update.\n- `activity`: Occurs periodically when the viewer count for this thread changes.\n- `settings`: Occurs when the thread's settings change. Emits an object containing the new settings.\n- `delete`: Occurs when an update has been deleted. Emits the ID of the deleted update.\n- `strike`: Occurs when an update has been striken (marked incorrect and crossed out). Emits the ID of the striken update.\n- `embeds_ready`: Occurs when embedded media is now available for a previously-posted update.\n- `complete`: Occurs when this LiveThread has been marked as complete, and no more updates will be sent.\n\n(Note: These event types are mapped directly from reddit's categorization of the updates. The descriptions above are\nparaphrased from reddit's descriptions [here](https://www.reddit.com/dev/api#section_live).)\n\nAs an example, this would log all new livethread updates to the console:\n\n```javascript\nsomeLivethread.stream.on('update', data => {\n  console.log(data.body);\n});\n```\n\n* @extends RedditContent\n*/\n\nvar LiveThread = class LiveThread extends _RedditContent.default {\n  constructor(options, _r, _hasFetched) {\n    var _this;\n\n    super(options, _r, _hasFetched);\n    _this = this;\n    this._rawStream = null;\n    this._populatedStream = null;\n\n    if (_hasFetched) {\n      Object.defineProperty(this, 'stream', {\n        get: function () {\n          if (!_this._populatedStream && _this.websocket_url) {\n            _this._setupWebSocket();\n          }\n\n          return _this._populatedStream;\n        }\n      });\n    }\n  }\n\n  get _uri() {\n    return \"live/\".concat(this.id, \"/about\");\n  }\n\n  _setupWebSocket() {\n    var _this2 = this;\n\n    this._rawStream = new WebSocket(this.websocket_url);\n    this._populatedStream = new _events.EventEmitter();\n\n    var handler = function (data) {\n      var parsed = _this2._r._populate(JSON.parse(data));\n\n      _this2._populatedStream.emit(parsed.type, parsed.payload);\n    };\n\n    if (typeof this._rawStream.on === 'function') {\n      this._rawStream.on('message', handler);\n    } else {\n      this._rawStream.onmessage = function (messageEvent) {\n        return handler(messageEvent.data);\n      };\n    }\n  }\n  /**\n  * @summary Adds a new update to this thread.\n  * @param {string} body The body of the new update\n  * @returns {Promise} A Promise that fulfills with this LiveThread when the request is complete\n  * @example r.getLivethread('whrdxo8dg9n0').addUpdate('Breaking: Someone is reading the snoowrap documentation \\\\o/')\n  */\n\n\n  addUpdate(body) {\n    return this._post({\n      uri: \"api/live/\".concat(this.id, \"/update\"),\n      form: {\n        api_type,\n        body\n      }\n    }).then((0, _helpers.handleJsonErrors)(this));\n  }\n  /**\n  * @summary Strikes (marks incorrect and crosses out) the given update.\n  * @param {object} options\n  * @param {string} options.id The ID of the update that should be striked.\n  * @returns {Promise} A Promise that fulfills with this LiveThread when the request is complete\n  * @example r.getLivethread('whrdxo8dg9n0').strikeUpdate({id: 'LiveUpdate_edc34446-faf0-11e5-a1b4-0e858bca33cd'})\n  */\n\n\n  strikeUpdate(_ref) {\n    var id = _ref.id;\n    return this._post({\n      uri: \"api/live/\".concat(this.id, \"/strike_update\"),\n      form: {\n        api_type,\n        id: \"\".concat(id.startsWith('LiveUpdate_') ? '' : 'LiveUpdate_').concat(id)\n      }\n    }).then((0, _helpers.handleJsonErrors)(this));\n  }\n  /**\n  * @summary Deletes an update from this LiveThread.\n  * @param {object} options\n  * @param {string} options.id The ID of the LiveUpdate that should be deleted\n  * @returns {Promise} A Promise that fulfills with this LiveThread when the request is complete\n  * @example r.getLivethread('whrdxo8dg9n0').deleteUpdate({id: 'LiveUpdate_edc34446-faf0-11e5-a1b4-0e858bca33cd'})\n  */\n\n\n  deleteUpdate(_ref2) {\n    var id = _ref2.id;\n    return this._post({\n      uri: \"api/live/\".concat(this.id, \"/delete_update\"),\n      form: {\n        api_type,\n        id: \"\".concat(id.startsWith('LiveUpdate_') ? '' : 'LiveUpdate_').concat(id)\n      }\n    }).then((0, _helpers.handleJsonErrors)(this));\n  }\n  /**\n  * @summary Gets a list of this LiveThread's contributors\n  * @returns {Promise} An Array containing RedditUsers\n  * @example\n  *\n  * r.getLivethread('whrdxo8dg9n0').getContributors().then(console.log)\n  * // => [\n  * //  RedditUser { permissions: ['edit'], name: 'not_an_aardvark', id: 't2_k83md' },\n  * //  RedditUser { permissions: ['all'], id: 't2_u3l80', name: 'snoowrap_testing' }\n  * // ]\n  */\n\n\n  getContributors() {\n    return this._get({\n      uri: \"live/\".concat(this.id, \"/contributors\")\n    }).then(function (contributors) {\n      return Array.isArray(contributors[0]) ? contributors[0] : contributors;\n    });\n  }\n  /**\n  * @summary Invites a contributor to this LiveThread.\n  * @param {object} options\n  * @param {string} options.name The name of the user who should be invited\n  * @param {Array} options.permissions The permissions that the invited user should receive. This should be an Array containing\n  some combination of `'update', 'edit', 'manage'`. To invite a contributor with full permissions, omit this property.\n  * @returns {Promise} A Promise that fulfills with this LiveThread when the request is complete\n  * @example r.getLivethread('whrdxo8dg9n0').inviteContributor({name: 'actually_an_aardvark', permissions: ['update']})\n  */\n\n\n  inviteContributor(_ref3) {\n    var name = _ref3.name,\n        permissions = _ref3.permissions;\n    return this._post({\n      uri: \"api/live/\".concat(this.id, \"/invite_contributor\"),\n      form: {\n        api_type,\n        name,\n        permissions: (0, _helpers.formatLivethreadPermissions)(permissions),\n        type: 'liveupdate_contributor_invite'\n      }\n    }).then((0, _helpers.handleJsonErrors)(this));\n  }\n  /**\n  * @summary Revokes an invitation for the given user to become a contributor on this LiveThread.\n  * @param {object} options\n  * @param {string} options.name The username of the account whose invitation should be revoked\n  * @returns {Promise} A Promise that fulfills with this LiveThread when the request is complete\n  * @example r.getLivethread('whrdxo8dg9n0').revokeContributorInvite({name: 'actually_an_aardvark'});\n  */\n\n\n  revokeContributorInvite(_ref4) {\n    var _this3 = this;\n\n    var name = _ref4.name;\n    return this._r.getUser(name).fetch().get('id').then(function (userId) {\n      return _this3._post({\n        uri: \"api/live/\".concat(_this3.id, \"/rm_contributor_invite\"),\n        form: {\n          api_type,\n          id: \"t2_\".concat(userId)\n        }\n      });\n    }).then((0, _helpers.handleJsonErrors)(this));\n  }\n  /**\n  * @summary Accepts a pending contributor invitation on this LiveThread.\n  * @returns {Promise} A Promise that fulfills with this LiveThread when the request is complete\n  * @example r.getLivethread('whrdxo8dg9n0').acceptContributorInvite()\n  */\n\n\n  acceptContributorInvite() {\n    return this._post({\n      uri: \"api/live/\".concat(this.id, \"/accept_contributor_invite\"),\n      form: {\n        api_type\n      }\n    }).return(this);\n  }\n  /**\n  * @summary Abdicates contributor status on this LiveThread.\n  * @returns {Promise} A Promise that fulfills with this LiveThread when the request is complete\n  * @example r.getLivethread('whrdxo8dg9n0').leaveContributor()\n  */\n\n\n  leaveContributor() {\n    return this._post({\n      uri: \"api/live/\".concat(this.id, \"/leave_contributor\"),\n      form: {\n        api_type\n      }\n    }).return(this);\n  }\n  /**\n  * @summary Removes the given user from contributor status on this LiveThread.\n  * @param {object} options\n  * @param {string} options.name The username of the account who should be removed\n  * @returns {Promise} A Promise that fulfills with this LiveThread when the request is complete\n  * @example r.getLivethread('whrdxo8dg9n0').removeContributor({name: 'actually_an_aardvark'})\n  */\n\n\n  removeContributor(_ref5) {\n    var _this4 = this;\n\n    var name = _ref5.name;\n    return this._r.getUser(name).fetch().get('id').then(function (userId) {\n      return _this4._post({\n        uri: \"api/live/\".concat(_this4.id, \"/rm_contributor\"),\n        form: {\n          api_type,\n          id: \"t2_\".concat(userId)\n        }\n      });\n    }).then((0, _helpers.handleJsonErrors)(this));\n  }\n  /**\n  * @summary Sets the permissions of the given contributor.\n  * @param {object} options\n  * @param {string} options.name The name of the user whose permissions should be changed\n  * @param {Array} options.permissions The updated permissions that the user should have. This should be an Array containing\n  some combination of `'update', 'edit', 'manage'`. To give the contributor with full permissions, omit this property.\n  * @returns {Promise} A Promise that fulfills with this LiveThread when the request is complete\n  * @example r.getLivethread('whrdxo8dg9n0').setContributorPermissions({name: 'actually_an_aardvark', permissions: ['edit']})\n  */\n\n\n  setContributorPermissions(_ref6) {\n    var name = _ref6.name,\n        permissions = _ref6.permissions;\n    return this._post({\n      uri: \"api/live/\".concat(this.id, \"/set_contributor_permissions\"),\n      form: {\n        api_type,\n        name,\n        permissions: (0, _helpers.formatLivethreadPermissions)(permissions),\n        type: 'liveupdate_contributor'\n      }\n    }).then((0, _helpers.handleJsonErrors)(this));\n  }\n  /**\n  * @summary Edits the settings on this LiveThread.\n  * @param {object} options\n  * @param {string} options.title The title of the thread\n  * @param {string} [options.description] A descriptions of the thread. 120 characters max\n  * @param {string} [options.resources] Information and useful links related to the thread.\n  * @param {boolean} options.nsfw Determines whether the thread is Not Safe For Work\n  * @returns {Promise} A Promise that fulfills with this LiveThread when the request is complete\n  * @example r.getLivethread('whrdxo8dg9n0').editSettings({title: 'My livethread', description: 'an updated description'})\n  */\n\n\n  editSettings(_ref7) {\n    var title = _ref7.title,\n        description = _ref7.description,\n        resources = _ref7.resources,\n        nsfw = _ref7.nsfw;\n    return this._post({\n      uri: \"api/live/\".concat(this.id, \"/edit\"),\n      form: {\n        api_type,\n        description,\n        nsfw,\n        resources,\n        title\n      }\n    }).then((0, _helpers.handleJsonErrors)(this));\n  }\n  /**\n  * @summary Permanently closes this thread, preventing any more updates from being added.\n  * @returns {Promise} A Promise that fulfills with this LiveThread when the request is complete\n  * @example r.getLivethread('whrdxo8dg9n0').closeThread()\n  */\n\n\n  closeThread() {\n    return this._post({\n      uri: \"api/live/\".concat(this.id, \"/close_thread\"),\n      form: {\n        api_type\n      }\n    }).return(this);\n  }\n  /**\n  * @summary Reports this LiveThread for breaking reddit's rules.\n  * @param {object} options\n  * @param {string} options.reason The reason for the report. One of `spam`, `vote-manipulation`, `personal-information`,\n  `sexualizing-minors`, `site-breaking`\n  * @returns {Promise} A Promise that fulfills with this LiveThread when the request is complete\n  * @example r.getLivethread('whrdxo8dg9n0').report({reason: 'Breaking a rule blah blah blah'})\n  */\n\n\n  report(_ref8) {\n    var reason = _ref8.reason;\n    return this._post({\n      uri: \"api/live/\".concat(this.id, \"/report\"),\n      form: {\n        api_type,\n        type: reason\n      }\n    }).then((0, _helpers.handleJsonErrors)(this));\n  }\n  /**\n  * @summary Gets a Listing containing past updates to this LiveThread.\n  * @param {object} [options] Options for the resulting Listing\n  * @returns {Promise} A Listing containing LiveUpdates\n  * @example\n  *\n  * r.getLivethread('whrdxo8dg9n0').getRecentUpdates().then(console.log)\n  * // => Listing [\n  * //  LiveUpdate { ... },\n  * //  LiveUpdate { ... },\n  * //  ...\n  * // ]\n  */\n\n\n  getRecentUpdates(options) {\n    return this._getListing({\n      uri: \"live/\".concat(this.id),\n      qs: options\n    });\n  }\n  /**\n  * @summary Gets a list of reddit submissions linking to this LiveThread.\n  * @param {object} [options] Options for the resulting Listing\n  * @returns {Promise} A Listing containing Submissions\n  * @example\n  *\n  * r.getLivethread('whrdxo8dg9n0').getDiscussions().then(console.log)\n  * // => Listing [\n  * //  Submission { ... },\n  * //  Submission { ... },\n  * //  ...\n  * // ]\n  */\n\n\n  getDiscussions(options) {\n    return this._getListing({\n      uri: \"live/\".concat(this.id, \"/discussions\"),\n      qs: options\n    });\n  }\n  /**\n  * @summary Stops listening for new updates on this LiveThread.\n  * @desc To avoid memory leaks that can result from open sockets, it's recommended that you call this method when you're\n  finished listening for updates on this LiveThread.\n  *\n  * This should not be confused with {@link LiveThread#closeThread}, which marks the thread as \"closed\" on reddit.\n  * @returns undefined\n  * @example\n  *\n  * var myThread = r.getLivethread('whrdxo8dg9n0');\n  * myThread.stream.on('update', content => {\n  *   console.log(content);\n  *   myThread.closeStream();\n  * })\n  *\n  */\n\n\n  closeStream() {\n    if (this._rawStream) {\n      this._rawStream.close();\n    }\n  }\n\n};\nvar _default = LiveThread;\nexports.default = _default;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}