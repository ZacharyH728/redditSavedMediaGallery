{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _helpers = require(\"../helpers.js\");\nvar _VoteableContent = _interopRequireDefault(require(\"./VoteableContent.js\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nvar api_type = 'json';\n/**\n* A class representing a reddit submission\n* <style> #Submission {display: none} </style>\n* @extends VoteableContent\n* @example\n*\n* // Get a submission by ID\n* r.getSubmission('2np694')\n*/\n\nvar Submission = class Submission extends _VoteableContent.default {\n  constructor(data, _r, _hasFetched) {\n    super(data, _r, _hasFetched);\n    if (_hasFetched) {\n      this.comments = this.comments || (0, _helpers.getEmptyRepliesListing)(this);\n    }\n  }\n  get _uri() {\n    return \"comments/\".concat(this.name.slice(3));\n  }\n  /**\n  * @summary Hides this Submission, preventing it from appearing on most Listings.\n  * @returns {Promise} The updated version of this Submission\n  * @example r.getSubmission('2np694').hide()\n  */\n\n  hide() {\n    return this._post({\n      uri: 'api/hide',\n      form: {\n        id: this.name\n      }\n    }).return(this);\n  }\n  /**\n  * @summary Unhides this Submission, allowing it to reappear on most Listings.\n  * @returns {Promise} The updated version of this Submission\n  * @example r.getSubmission('2np694').unhide()\n  */\n\n  unhide() {\n    return this._post({\n      uri: 'api/unhide',\n      form: {\n        id: this.name\n      }\n    }).return(this);\n  }\n  /**\n  * @summary Locks this Submission, preventing new comments from being posted on it.\n  * @returns {Promise} The updated version of this Submission\n  * @example r.getSubmission('2np694').lock()\n  */\n\n  lock() {\n    return this._post({\n      uri: 'api/lock',\n      form: {\n        id: this.name\n      }\n    }).return(this);\n  }\n  /**\n  * @summary Unlocks this Submission, allowing comments to be posted on it again.\n  * @returns {Promise} The updated version of this Submission\n  * @example r.getSubmission('2np694').unlock()\n  */\n\n  unlock() {\n    return this._post({\n      uri: 'api/unlock',\n      form: {\n        id: this.name\n      }\n    }).return(this);\n  }\n  /**\n  * @summary Marks this Submission as NSFW (Not Safe For Work).\n  * @returns {Promise} The updated version of this Submission\n  * @example r.getSubmission('2np694').markNsfw()\n  */\n\n  markNsfw() {\n    return this._post({\n      uri: 'api/marknsfw',\n      form: {\n        id: this.name\n      }\n    }).return(this);\n  }\n  /**\n  * @summary Unmarks this Submission as NSFW (Not Safe For Work).\n  * @returns {Promise} The updated version of this Submission\n  * @example r.getSubmission('2np694').unmarkNsfw()\n  */\n\n  unmarkNsfw() {\n    return this._post({\n      uri: 'api/unmarknsfw',\n      form: {\n        id: this.name\n      }\n    }).return(this);\n  }\n  /**\n  * @summary Mark a submission as a spoiler\n  * @desc **Note:** This will silently fail if the subreddit has disabled spoilers.\n  * @returns {Promise} A Promise that fulfills with this Submission when the request is complete\n  * @example r.getSubmission('2np694').markSpoiler()\n  */\n\n  markSpoiler() {\n    return this._post({\n      uri: 'api/spoiler',\n      form: {\n        id: this.name\n      }\n    }).return(this);\n  }\n  /**\n  * @summary Unmark a submission as a spoiler\n  * @returns {Promise} A Promise that fulfills with this Submission when the request is complete\n  * @example r.getSubmission('2np694').unmarkSpoiler()\n  */\n\n  unmarkSpoiler() {\n    return this._post({\n      uri: 'api/unspoiler',\n      form: {\n        id: this.name\n      }\n    }).return(this);\n  }\n  /**\n  * @summary Sets the contest mode status of this submission.\n  * @private\n  * @param {boolean} state The desired contest mode status\n  * @returns {Promise} The updated version of this Submission\n  */\n\n  _setContestModeEnabled(state) {\n    return this._post({\n      uri: 'api/set_contest_mode',\n      form: {\n        api_type,\n        state,\n        id: this.name\n      }\n    }).return(this);\n  }\n  /**\n  * @summary Enables contest mode for this Submission.\n  * @returns {Promise} The updated version of this Submission\n  * @example r.getSubmission('2np694').enableContestMode()\n  */\n\n  enableContestMode() {\n    return this._setContestModeEnabled(true);\n  }\n  /**\n  * @summary Disables contest mode for this Submission.\n  * @returns {Promise} The updated version of this Submission\n  * @example r.getSubmission('2np694').disableContestMode()\n  */\n\n  disableContestMode() {\n    return this._setContestModeEnabled(false);\n  }\n  _setStickied(_ref) {\n    var state = _ref.state,\n      num = _ref.num;\n    return this._post({\n      uri: 'api/set_subreddit_sticky',\n      form: {\n        api_type,\n        state,\n        num,\n        id: this.name\n      }\n    }).return(this);\n  }\n  /**\n  * @summary Stickies this Submission.\n  * @param {object} [options]\n  * @param {number} [options.num=1] The sticky slot to put this submission in; this should be either 1 or 2.\n  * @returns {Promise} The updated version of this Submission\n  * @example r.getSubmission('2np694').sticky({num: 2})\n  */\n\n  sticky() {\n    var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref2$num = _ref2.num,\n      num = _ref2$num === void 0 ? 1 : _ref2$num;\n    return this._setStickied({\n      state: true,\n      num\n    });\n  }\n  /**\n  * @summary Unstickies this Submission.\n  * @returns {Promise} The updated version of this Submission\n  * @example r.getSubmission('2np694').unsticky()\n  */\n\n  unsticky() {\n    return this._setStickied({\n      state: false\n    });\n  }\n  /**\n  * @summary Sets the suggested comment sort method on this Submission\n  * @desc **Note**: To enable contest mode, use {@link Submission#enableContestMode} instead.\n  * @param {string} sort The suggested sort method. This should be one of\n  `confidence, top, new, controversial, old, random, qa, blank`\n  * @returns {Promise} The updated version of this Submission\n  * @example r.getSubmission('2np694').setSuggestedSort('new')\n  */\n\n  setSuggestedSort(sort) {\n    return this._post({\n      uri: 'api/set_suggested_sort',\n      form: {\n        api_type,\n        id: this.name,\n        sort\n      }\n    }).return(this);\n  }\n  /**\n  * @summary Marks this submission as 'visited'.\n  * @desc **Note**: This function only works if the authenticated account has a subscription to reddit gold.\n  * @returns {Promise} The updated version of this Submission\n  * @example r.getSubmission('2np694').markAsRead()\n  */\n\n  markAsRead() {\n    return this._post({\n      uri: 'api/store_visits',\n      form: {\n        links: this.name\n      }\n    }).return(this);\n  }\n  /**\n  * @summary Gets a Listing of other submissions on reddit that had the same link as this one.\n  * @param {object} [options={}] Options for the resulting Listing\n  * @returns {Promise} A Listing of other Submission objects\n  * @example r.getSubmission('2np694').getDuplicates()\n  */\n\n  getDuplicates() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this._getListing({\n      uri: \"duplicates/\".concat(this.name.slice(3)),\n      qs: options\n    });\n  }\n  /**\n  * @summary Gets a Listing of Submissions that are related to this one.\n  * @deprecated This function uses the <code>/related/submission_id</code> endpoint, which was recently changed on reddit.com;\n  instead of returning a Listing containing related posts, the reddit API now simply returns the post itself. As such, this\n  function only exists for backwards compatability and should not be used in practice.\n  * @param {object} [options={}] ~~Options for the resulting Listing~~\n  * @returns {Promise} ~~A Listing of other Submission objects~~ The submission in question.\n  * @example r.getSubmission('2np694').getRelated()\n  */\n\n  getRelated() {\n    var _this = this;\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this._getListing({\n      uri: \"related/\".concat(this.name.slice(3)),\n      qs: options\n    }).tap(function (result) {\n      if (result.constructor._name === 'Submission') {\n        _this._r._warn('Submission#getRelated has been deprecated upstream, and will not work as expected.');\n      }\n    });\n  }\n  /**\n  * @summary Gets a list of flair template options for this post.\n  * @returns {Promise} An Array of flair templates\n  * @example\n  *\n  * r.getSubmission('2np694').getLinkFlairTemplates().then(console.log)\n  *\n  * // => [\n  * //   { flair_text: 'Text 1', flair_css_class: '', flair_text_editable: false, flair_template_id: '(UUID not shown)' ... },\n  * //   { flair_text: 'Text 2', flair_css_class: 'aa', flair_text_editable: false, flair_template_id: '(UUID not shown)' ... },\n  * //   ...\n  * // ]\n  */\n\n  getLinkFlairTemplates() {\n    var _this2 = this;\n    return this.fetch().get('subreddit').then(function (sub) {\n      return sub.getLinkFlairTemplates(_this2.name);\n    });\n  }\n  /**\n  * @summary Assigns flair on this Submission (as a moderator; also see [selectFlair]{@link Submission#selectFlair})\n  * @param {object} options\n  * @param {string} options.text The text that this link's flair should have\n  * @param {string} options.cssClass The CSS class that the link's flair should have\n  * @returns {Promise} A Promise that fulfills with an updated version of this Submission\n  * @example r.getSubmission('2np694').assignFlair({text: 'this is a flair text', cssClass: 'these are css classes'})\n  */\n\n  assignFlair(options) {\n    return this._r._assignFlair(_objectSpread({}, options, {\n      link: this.name,\n      subredditName: this.subreddit.display_name\n    })).return(this);\n  }\n  /**\n  * @summary Selects a flair for this Submission (as the OP; also see [assignFlair]{@link Submission#assignFlair})\n  * @param {object} options\n  * @param {string} options.flair_template_id A flair template ID to use for this Submission. (This should be obtained\n  beforehand using {@link getLinkFlairTemplates}.)\n  * @param {string} [options.text] The flair text to use for the submission. (This is only necessary/useful if the given flair\n  template has the `text_editable` property set to `true`.)\n  * @returns {Promise} A Promise that fulfills with this objects after the request is complete\n  * @example r.getSubmission('2np694').selectFlair({flair_template_id: 'e3340d80-8152-11e4-a76a-22000bc1096c'})\n  */\n\n  selectFlair(options) {\n    return this._r._selectFlair(_objectSpread({}, options, {\n      link: this.name,\n      subredditName: this.subreddit.display_name\n    })).return(this);\n  }\n  /**\n   * @summary Crossposts this submission to a different subreddit\n   * @desc **NOTE**: To create a crosspost, the authenticated account must be subscribed to the subreddit where\n   * the crosspost is being submitted, and that subreddit be configured to allow crossposts.\n   * @param {object} options An object containing details about the submission\n   * @param {string} options.subredditName The name of the subreddit that the crosspost should be submitted to\n   * @param {string} options.title The title of the crosspost\n   * @param {boolean} [options.sendReplies=true] Determines whether inbox replies should be enabled for this submission\n   * @param {boolean} [options.resubmit=true] If this is false and same link has already been submitted to this subreddit in\n   the past, reddit will return an error. This could be used to avoid accidental reposts.\n   * @returns {Promise} The newly-created Submission object\n   * @example\n   *\n   * await r.getSubmission('6vths0').submitCrosspost({ title: 'I found an interesting post', subredditName: 'snoowrap' })\n   */\n\n  submitCrosspost(options) {\n    return this._r.submitCrosspost(_objectSpread({}, options, {\n      originalPost: this\n    }));\n  }\n};\nvar _default = Submission;\nexports.default = _default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","_helpers","require","_VoteableContent","_interopRequireDefault","obj","__esModule","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","configurable","writable","api_type","Submission","constructor","data","_r","_hasFetched","comments","getEmptyRepliesListing","_uri","concat","name","slice","hide","_post","uri","form","id","return","unhide","lock","unlock","markNsfw","unmarkNsfw","markSpoiler","unmarkSpoiler","_setContestModeEnabled","state","enableContestMode","disableContestMode","_setStickied","_ref","num","sticky","_ref2","undefined","_ref2$num","unsticky","setSuggestedSort","sort","markAsRead","links","getDuplicates","options","_getListing","qs","getRelated","_this","tap","result","_name","_warn","getLinkFlairTemplates","_this2","fetch","get","then","sub","assignFlair","_assignFlair","link","subredditName","subreddit","display_name","selectFlair","_selectFlair","submitCrosspost","originalPost","_default"],"sources":["/Users/zachary/Desktop/reddit-saved-gallery/node_modules/snoowrap/dist/objects/Submission.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _helpers = require(\"../helpers.js\");\n\nvar _VoteableContent = _interopRequireDefault(require(\"./VoteableContent.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar api_type = 'json';\n/**\n* A class representing a reddit submission\n* <style> #Submission {display: none} </style>\n* @extends VoteableContent\n* @example\n*\n* // Get a submission by ID\n* r.getSubmission('2np694')\n*/\n\nvar Submission = class Submission extends _VoteableContent.default {\n  constructor(data, _r, _hasFetched) {\n    super(data, _r, _hasFetched);\n\n    if (_hasFetched) {\n      this.comments = this.comments || (0, _helpers.getEmptyRepliesListing)(this);\n    }\n  }\n\n  get _uri() {\n    return \"comments/\".concat(this.name.slice(3));\n  }\n  /**\n  * @summary Hides this Submission, preventing it from appearing on most Listings.\n  * @returns {Promise} The updated version of this Submission\n  * @example r.getSubmission('2np694').hide()\n  */\n\n\n  hide() {\n    return this._post({\n      uri: 'api/hide',\n      form: {\n        id: this.name\n      }\n    }).return(this);\n  }\n  /**\n  * @summary Unhides this Submission, allowing it to reappear on most Listings.\n  * @returns {Promise} The updated version of this Submission\n  * @example r.getSubmission('2np694').unhide()\n  */\n\n\n  unhide() {\n    return this._post({\n      uri: 'api/unhide',\n      form: {\n        id: this.name\n      }\n    }).return(this);\n  }\n  /**\n  * @summary Locks this Submission, preventing new comments from being posted on it.\n  * @returns {Promise} The updated version of this Submission\n  * @example r.getSubmission('2np694').lock()\n  */\n\n\n  lock() {\n    return this._post({\n      uri: 'api/lock',\n      form: {\n        id: this.name\n      }\n    }).return(this);\n  }\n  /**\n  * @summary Unlocks this Submission, allowing comments to be posted on it again.\n  * @returns {Promise} The updated version of this Submission\n  * @example r.getSubmission('2np694').unlock()\n  */\n\n\n  unlock() {\n    return this._post({\n      uri: 'api/unlock',\n      form: {\n        id: this.name\n      }\n    }).return(this);\n  }\n  /**\n  * @summary Marks this Submission as NSFW (Not Safe For Work).\n  * @returns {Promise} The updated version of this Submission\n  * @example r.getSubmission('2np694').markNsfw()\n  */\n\n\n  markNsfw() {\n    return this._post({\n      uri: 'api/marknsfw',\n      form: {\n        id: this.name\n      }\n    }).return(this);\n  }\n  /**\n  * @summary Unmarks this Submission as NSFW (Not Safe For Work).\n  * @returns {Promise} The updated version of this Submission\n  * @example r.getSubmission('2np694').unmarkNsfw()\n  */\n\n\n  unmarkNsfw() {\n    return this._post({\n      uri: 'api/unmarknsfw',\n      form: {\n        id: this.name\n      }\n    }).return(this);\n  }\n  /**\n  * @summary Mark a submission as a spoiler\n  * @desc **Note:** This will silently fail if the subreddit has disabled spoilers.\n  * @returns {Promise} A Promise that fulfills with this Submission when the request is complete\n  * @example r.getSubmission('2np694').markSpoiler()\n  */\n\n\n  markSpoiler() {\n    return this._post({\n      uri: 'api/spoiler',\n      form: {\n        id: this.name\n      }\n    }).return(this);\n  }\n  /**\n  * @summary Unmark a submission as a spoiler\n  * @returns {Promise} A Promise that fulfills with this Submission when the request is complete\n  * @example r.getSubmission('2np694').unmarkSpoiler()\n  */\n\n\n  unmarkSpoiler() {\n    return this._post({\n      uri: 'api/unspoiler',\n      form: {\n        id: this.name\n      }\n    }).return(this);\n  }\n  /**\n  * @summary Sets the contest mode status of this submission.\n  * @private\n  * @param {boolean} state The desired contest mode status\n  * @returns {Promise} The updated version of this Submission\n  */\n\n\n  _setContestModeEnabled(state) {\n    return this._post({\n      uri: 'api/set_contest_mode',\n      form: {\n        api_type,\n        state,\n        id: this.name\n      }\n    }).return(this);\n  }\n  /**\n  * @summary Enables contest mode for this Submission.\n  * @returns {Promise} The updated version of this Submission\n  * @example r.getSubmission('2np694').enableContestMode()\n  */\n\n\n  enableContestMode() {\n    return this._setContestModeEnabled(true);\n  }\n  /**\n  * @summary Disables contest mode for this Submission.\n  * @returns {Promise} The updated version of this Submission\n  * @example r.getSubmission('2np694').disableContestMode()\n  */\n\n\n  disableContestMode() {\n    return this._setContestModeEnabled(false);\n  }\n\n  _setStickied(_ref) {\n    var state = _ref.state,\n        num = _ref.num;\n    return this._post({\n      uri: 'api/set_subreddit_sticky',\n      form: {\n        api_type,\n        state,\n        num,\n        id: this.name\n      }\n    }).return(this);\n  }\n  /**\n  * @summary Stickies this Submission.\n  * @param {object} [options]\n  * @param {number} [options.num=1] The sticky slot to put this submission in; this should be either 1 or 2.\n  * @returns {Promise} The updated version of this Submission\n  * @example r.getSubmission('2np694').sticky({num: 2})\n  */\n\n\n  sticky() {\n    var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref2$num = _ref2.num,\n        num = _ref2$num === void 0 ? 1 : _ref2$num;\n\n    return this._setStickied({\n      state: true,\n      num\n    });\n  }\n  /**\n  * @summary Unstickies this Submission.\n  * @returns {Promise} The updated version of this Submission\n  * @example r.getSubmission('2np694').unsticky()\n  */\n\n\n  unsticky() {\n    return this._setStickied({\n      state: false\n    });\n  }\n  /**\n  * @summary Sets the suggested comment sort method on this Submission\n  * @desc **Note**: To enable contest mode, use {@link Submission#enableContestMode} instead.\n  * @param {string} sort The suggested sort method. This should be one of\n  `confidence, top, new, controversial, old, random, qa, blank`\n  * @returns {Promise} The updated version of this Submission\n  * @example r.getSubmission('2np694').setSuggestedSort('new')\n  */\n\n\n  setSuggestedSort(sort) {\n    return this._post({\n      uri: 'api/set_suggested_sort',\n      form: {\n        api_type,\n        id: this.name,\n        sort\n      }\n    }).return(this);\n  }\n  /**\n  * @summary Marks this submission as 'visited'.\n  * @desc **Note**: This function only works if the authenticated account has a subscription to reddit gold.\n  * @returns {Promise} The updated version of this Submission\n  * @example r.getSubmission('2np694').markAsRead()\n  */\n\n\n  markAsRead() {\n    return this._post({\n      uri: 'api/store_visits',\n      form: {\n        links: this.name\n      }\n    }).return(this);\n  }\n  /**\n  * @summary Gets a Listing of other submissions on reddit that had the same link as this one.\n  * @param {object} [options={}] Options for the resulting Listing\n  * @returns {Promise} A Listing of other Submission objects\n  * @example r.getSubmission('2np694').getDuplicates()\n  */\n\n\n  getDuplicates() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this._getListing({\n      uri: \"duplicates/\".concat(this.name.slice(3)),\n      qs: options\n    });\n  }\n  /**\n  * @summary Gets a Listing of Submissions that are related to this one.\n  * @deprecated This function uses the <code>/related/submission_id</code> endpoint, which was recently changed on reddit.com;\n  instead of returning a Listing containing related posts, the reddit API now simply returns the post itself. As such, this\n  function only exists for backwards compatability and should not be used in practice.\n  * @param {object} [options={}] ~~Options for the resulting Listing~~\n  * @returns {Promise} ~~A Listing of other Submission objects~~ The submission in question.\n  * @example r.getSubmission('2np694').getRelated()\n  */\n\n\n  getRelated() {\n    var _this = this;\n\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this._getListing({\n      uri: \"related/\".concat(this.name.slice(3)),\n      qs: options\n    }).tap(function (result) {\n      if (result.constructor._name === 'Submission') {\n        _this._r._warn('Submission#getRelated has been deprecated upstream, and will not work as expected.');\n      }\n    });\n  }\n  /**\n  * @summary Gets a list of flair template options for this post.\n  * @returns {Promise} An Array of flair templates\n  * @example\n  *\n  * r.getSubmission('2np694').getLinkFlairTemplates().then(console.log)\n  *\n  * // => [\n  * //   { flair_text: 'Text 1', flair_css_class: '', flair_text_editable: false, flair_template_id: '(UUID not shown)' ... },\n  * //   { flair_text: 'Text 2', flair_css_class: 'aa', flair_text_editable: false, flair_template_id: '(UUID not shown)' ... },\n  * //   ...\n  * // ]\n  */\n\n\n  getLinkFlairTemplates() {\n    var _this2 = this;\n\n    return this.fetch().get('subreddit').then(function (sub) {\n      return sub.getLinkFlairTemplates(_this2.name);\n    });\n  }\n  /**\n  * @summary Assigns flair on this Submission (as a moderator; also see [selectFlair]{@link Submission#selectFlair})\n  * @param {object} options\n  * @param {string} options.text The text that this link's flair should have\n  * @param {string} options.cssClass The CSS class that the link's flair should have\n  * @returns {Promise} A Promise that fulfills with an updated version of this Submission\n  * @example r.getSubmission('2np694').assignFlair({text: 'this is a flair text', cssClass: 'these are css classes'})\n  */\n\n\n  assignFlair(options) {\n    return this._r._assignFlair(_objectSpread({}, options, {\n      link: this.name,\n      subredditName: this.subreddit.display_name\n    })).return(this);\n  }\n  /**\n  * @summary Selects a flair for this Submission (as the OP; also see [assignFlair]{@link Submission#assignFlair})\n  * @param {object} options\n  * @param {string} options.flair_template_id A flair template ID to use for this Submission. (This should be obtained\n  beforehand using {@link getLinkFlairTemplates}.)\n  * @param {string} [options.text] The flair text to use for the submission. (This is only necessary/useful if the given flair\n  template has the `text_editable` property set to `true`.)\n  * @returns {Promise} A Promise that fulfills with this objects after the request is complete\n  * @example r.getSubmission('2np694').selectFlair({flair_template_id: 'e3340d80-8152-11e4-a76a-22000bc1096c'})\n  */\n\n\n  selectFlair(options) {\n    return this._r._selectFlair(_objectSpread({}, options, {\n      link: this.name,\n      subredditName: this.subreddit.display_name\n    })).return(this);\n  }\n  /**\n   * @summary Crossposts this submission to a different subreddit\n   * @desc **NOTE**: To create a crosspost, the authenticated account must be subscribed to the subreddit where\n   * the crosspost is being submitted, and that subreddit be configured to allow crossposts.\n   * @param {object} options An object containing details about the submission\n   * @param {string} options.subredditName The name of the subreddit that the crosspost should be submitted to\n   * @param {string} options.title The title of the crosspost\n   * @param {boolean} [options.sendReplies=true] Determines whether inbox replies should be enabled for this submission\n   * @param {boolean} [options.resubmit=true] If this is false and same link has already been submitted to this subreddit in\n   the past, reddit will return an error. This could be used to avoid accidental reposts.\n   * @returns {Promise} The newly-created Submission object\n   * @example\n   *\n   * await r.getSubmission('6vths0').submitCrosspost({ title: 'I found an interesting post', subredditName: 'snoowrap' })\n   */\n\n\n  submitCrosspost(options) {\n    return this._r.submitCrosspost(_objectSpread({}, options, {\n      originalPost: this\n    }));\n  }\n\n};\nvar _default = Submission;\nexports.default = _default;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}