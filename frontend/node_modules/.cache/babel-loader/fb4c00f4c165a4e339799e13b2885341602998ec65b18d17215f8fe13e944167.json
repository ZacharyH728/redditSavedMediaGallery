{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.emptyChildren = void 0;\nvar _lodash = require(\"lodash\");\nvar _Promise = _interopRequireDefault(require(\"../Promise.js\"));\nvar _helpers = require(\"../helpers.js\");\nvar _constants = require(\"../constants.js\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nvar api_type = 'json';\n/**\n* The `More` class is a helper representing reddit's exposed `more` type in comment threads, used to fetch additional comments\non a thread.\n* No instances of the `More` class are exposed externally by snoowrap; instead, comment lists are exposed as Listings.\nAdditional replies on an item can be fetched by calling `fetchMore` on a Listing, in the same manner as what would be done\nwith a Listing of posts. snoowrap should handle the differences internally, and expose a nearly-identical interface for the\ntwo use-cases.\n\nCombining reddit's `Listing` and `more` objects has the advantage of having a more consistent exposed interface; for example,\nif a consumer iterates over the comments on a Submission, all of the iterated items will actually be Comment objects, so the\nconsumer won't encounter an unexpected `more` object at the end. However, there are a few disadvantages, namely that (a) this\nleads to an increase in internal complexity, and (b) there are a few cases where reddit's `more` objects have different amounts\nof available information (e.g. all the child IDs of a `more` object are known on creation), which leads to different optimal\nbehavior.\n*/\n\nvar More = class More {\n  constructor(options, _r) {\n    Object.assign(this, options);\n    this._r = _r;\n  }\n  /* Requests to /api/morechildren are capped at 20 comments at a time, but requests to /api/info are capped at 100, so\n  it's easier to send to the latter. The disadvantage is that comment replies are not automatically sent from requests\n  to /api/info. */\n\n  fetchMore(options) {\n    var startIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    if (options.amount <= 0 || startIndex >= this.children.length) {\n      return _Promise.default.resolve([]);\n    }\n    if (!options.skipReplies) {\n      return this.fetchTree(options, startIndex);\n    }\n    var ids = getNextIdSlice(this.children, startIndex, options.amount, _constants.MAX_API_INFO_AMOUNT).map(function (id) {\n      return \"t1_\".concat(id);\n    }); // Requests are capped at 100 comments. Send lots of requests recursively to get the comments, then concatenate them.\n    // (This speed-requesting is only possible with comment Listings since the entire list of ids is present initially.)\n\n    var promiseForThisBatch = this._r._getListing({\n      uri: 'api/info',\n      qs: {\n        id: ids.join(',')\n      }\n    });\n    var nextRequestOptions = _objectSpread({}, options, {\n      amount: options.amount - ids.length\n    });\n    var promiseForRemainingItems = this.fetchMore(nextRequestOptions, startIndex + ids.length);\n    return _Promise.default.all([promiseForThisBatch, promiseForRemainingItems]).then(_lodash.flatten);\n  }\n  fetchTree(options, startIndex) {\n    var _this = this;\n    if (options.amount <= 0 || startIndex >= this.children.length) {\n      return _Promise.default.resolve([]);\n    }\n    var ids = getNextIdSlice(this.children, startIndex, options.amount, _constants.MAX_API_MORECHILDREN_AMOUNT);\n    return this._r._get({\n      uri: 'api/morechildren',\n      qs: {\n        api_type,\n        children: ids.join(','),\n        link_id: this.link_id || this.parent_id\n      }\n    }).tap(_helpers.handleJsonErrors).then(function (res) {\n      return res.json.data.things;\n    }).map(_helpers.addEmptyRepliesListing).then(_helpers.buildRepliesTree).then(function (resultTrees) {\n      /* Sometimes, when sending a request to reddit to get multiple comments from a `more` object, reddit decides to only\n      send some of the requested comments, and then stub out the remaining ones in a smaller `more` object. ( ¯\\_(ツ)_/¯ )\n      In these cases, recursively fetch the smaller `more` objects as well. */\n      var childMores = (0, _lodash.remove)(resultTrees, function (c) {\n        return c instanceof More;\n      });\n      (0, _lodash.forEach)(childMores, function (c) {\n        c.link_id = _this.link_id || _this.parent_id;\n      });\n      return _Promise.default.mapSeries(childMores, function (c) {\n        return c.fetchTree(_objectSpread({}, options, {\n          amount: Infinity\n        }), 0);\n      }).then(function (expandedTrees) {\n        return _this.fetchMore(_objectSpread({}, options, {\n          amount: options.amount - ids.length\n        }), startIndex + ids.length).then(function (nexts) {\n          return (0, _lodash.concat)(resultTrees, (0, _lodash.flatten)(expandedTrees), nexts);\n        });\n      });\n    });\n  }\n  _clone() {\n    return new More((0, _lodash.pick)(this, Object.getOwnPropertyNames(this)), this._r);\n  }\n};\nfunction getNextIdSlice(children, startIndex, desiredAmount, limit) {\n  return children.slice(startIndex, startIndex + Math.min(desiredAmount, limit));\n}\nvar emptyChildren = new More({\n  children: []\n});\nexports.emptyChildren = emptyChildren;\nvar _default = More;\nexports.default = _default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","emptyChildren","_lodash","require","_Promise","_interopRequireDefault","_helpers","_constants","obj","__esModule","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","configurable","writable","api_type","More","constructor","options","_r","assign","fetchMore","startIndex","undefined","amount","children","resolve","skipReplies","fetchTree","ids","getNextIdSlice","MAX_API_INFO_AMOUNT","map","id","concat","promiseForThisBatch","_getListing","uri","qs","join","nextRequestOptions","promiseForRemainingItems","all","then","flatten","_this","MAX_API_MORECHILDREN_AMOUNT","_get","link_id","parent_id","tap","handleJsonErrors","res","json","data","things","addEmptyRepliesListing","buildRepliesTree","resultTrees","childMores","remove","c","mapSeries","Infinity","expandedTrees","nexts","_clone","pick","getOwnPropertyNames","desiredAmount","limit","slice","Math","min","_default"],"sources":["/Users/zachary/Desktop/reddit-saved-gallery/node_modules/snoowrap/dist/objects/More.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.emptyChildren = void 0;\n\nvar _lodash = require(\"lodash\");\n\nvar _Promise = _interopRequireDefault(require(\"../Promise.js\"));\n\nvar _helpers = require(\"../helpers.js\");\n\nvar _constants = require(\"../constants.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar api_type = 'json';\n/**\n* The `More` class is a helper representing reddit's exposed `more` type in comment threads, used to fetch additional comments\non a thread.\n* No instances of the `More` class are exposed externally by snoowrap; instead, comment lists are exposed as Listings.\nAdditional replies on an item can be fetched by calling `fetchMore` on a Listing, in the same manner as what would be done\nwith a Listing of posts. snoowrap should handle the differences internally, and expose a nearly-identical interface for the\ntwo use-cases.\n\nCombining reddit's `Listing` and `more` objects has the advantage of having a more consistent exposed interface; for example,\nif a consumer iterates over the comments on a Submission, all of the iterated items will actually be Comment objects, so the\nconsumer won't encounter an unexpected `more` object at the end. However, there are a few disadvantages, namely that (a) this\nleads to an increase in internal complexity, and (b) there are a few cases where reddit's `more` objects have different amounts\nof available information (e.g. all the child IDs of a `more` object are known on creation), which leads to different optimal\nbehavior.\n*/\n\nvar More = class More {\n  constructor(options, _r) {\n    Object.assign(this, options);\n    this._r = _r;\n  }\n  /* Requests to /api/morechildren are capped at 20 comments at a time, but requests to /api/info are capped at 100, so\n  it's easier to send to the latter. The disadvantage is that comment replies are not automatically sent from requests\n  to /api/info. */\n\n\n  fetchMore(options) {\n    var startIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n    if (options.amount <= 0 || startIndex >= this.children.length) {\n      return _Promise.default.resolve([]);\n    }\n\n    if (!options.skipReplies) {\n      return this.fetchTree(options, startIndex);\n    }\n\n    var ids = getNextIdSlice(this.children, startIndex, options.amount, _constants.MAX_API_INFO_AMOUNT).map(function (id) {\n      return \"t1_\".concat(id);\n    }); // Requests are capped at 100 comments. Send lots of requests recursively to get the comments, then concatenate them.\n    // (This speed-requesting is only possible with comment Listings since the entire list of ids is present initially.)\n\n    var promiseForThisBatch = this._r._getListing({\n      uri: 'api/info',\n      qs: {\n        id: ids.join(',')\n      }\n    });\n\n    var nextRequestOptions = _objectSpread({}, options, {\n      amount: options.amount - ids.length\n    });\n\n    var promiseForRemainingItems = this.fetchMore(nextRequestOptions, startIndex + ids.length);\n    return _Promise.default.all([promiseForThisBatch, promiseForRemainingItems]).then(_lodash.flatten);\n  }\n\n  fetchTree(options, startIndex) {\n    var _this = this;\n\n    if (options.amount <= 0 || startIndex >= this.children.length) {\n      return _Promise.default.resolve([]);\n    }\n\n    var ids = getNextIdSlice(this.children, startIndex, options.amount, _constants.MAX_API_MORECHILDREN_AMOUNT);\n    return this._r._get({\n      uri: 'api/morechildren',\n      qs: {\n        api_type,\n        children: ids.join(','),\n        link_id: this.link_id || this.parent_id\n      }\n    }).tap(_helpers.handleJsonErrors).then(function (res) {\n      return res.json.data.things;\n    }).map(_helpers.addEmptyRepliesListing).then(_helpers.buildRepliesTree).then(function (resultTrees) {\n      /* Sometimes, when sending a request to reddit to get multiple comments from a `more` object, reddit decides to only\n      send some of the requested comments, and then stub out the remaining ones in a smaller `more` object. ( ¯\\_(ツ)_/¯ )\n      In these cases, recursively fetch the smaller `more` objects as well. */\n      var childMores = (0, _lodash.remove)(resultTrees, function (c) {\n        return c instanceof More;\n      });\n      (0, _lodash.forEach)(childMores, function (c) {\n        c.link_id = _this.link_id || _this.parent_id;\n      });\n      return _Promise.default.mapSeries(childMores, function (c) {\n        return c.fetchTree(_objectSpread({}, options, {\n          amount: Infinity\n        }), 0);\n      }).then(function (expandedTrees) {\n        return _this.fetchMore(_objectSpread({}, options, {\n          amount: options.amount - ids.length\n        }), startIndex + ids.length).then(function (nexts) {\n          return (0, _lodash.concat)(resultTrees, (0, _lodash.flatten)(expandedTrees), nexts);\n        });\n      });\n    });\n  }\n\n  _clone() {\n    return new More((0, _lodash.pick)(this, Object.getOwnPropertyNames(this)), this._r);\n  }\n\n};\n\nfunction getNextIdSlice(children, startIndex, desiredAmount, limit) {\n  return children.slice(startIndex, startIndex + Math.min(desiredAmount, limit));\n}\n\nvar emptyChildren = new More({\n  children: []\n});\nexports.emptyChildren = emptyChildren;\nvar _default = More;\nexports.default = _default;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}